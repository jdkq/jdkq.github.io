[{"title":"JQuery链式编程","path":"/posts/9c508b41.html","content":"需求： 页面中有一个按钮,还有一个div 点击按钮在div中添加一个p标签内容 点击的同时修改div背景颜色 123456789$(function() &#123;\t// body...\t// 获取按钮调用点击事件，湖片区div设置p内容，点击按钮设置背景颜色\t$(&#x27;#btn&#x27;).click(function()&#123; $(&#x27;#dv&#x27;).html(&#x27;&lt;p&gt;这是一个p&lt;/p&gt;&#x27;).css(&quot;backgroundColor&quot;,&quot;red&quot;)\t&#125;)\tvar obj = $(&#x27;#dv&#x27;).html(&#x27;&lt;p&gt;这是一个p&lt;/p&gt;&#x27;)\tdocument.getElementById(&#x27;obj&#x27;).innerHTML = obj&#125;) 123&lt;input type=&quot;button&quot; value=&quot;显示效果&quot; id=&quot;btn&quot; name=&quot;&quot;&gt;&lt;div id=&quot;dv&quot;&gt;&lt;/div&gt;&lt;p&gt;这时候前提是获取的这个div调用对象的返回值必须是：&lt;span id=&quot;obj&quot;&gt;&lt;/span&gt;&lt;/p&gt;才可以使用链式编程 案例1需求： 获取列表中的每个li,当鼠标进入后，当前li高亮显示 点击的时候可以让点击li字体变大 字体颜色改变 字体改变 1234567$(function() &#123;\t$(&#x27;#uu&gt;li&#x27;).mouseover(function()&#123; $(this).css(&quot;backgroundColor&quot;,&quot;red&quot;).siblings(&quot;li&quot;).css(&quot;backgroundColor&quot;,&quot;&quot;)\t&#125;).click(function()&#123; $(this).css(&quot;fontSize&quot;,&quot;30px&quot;).css(&quot;color&quot;,&quot;green&quot;).css(&quot;fontFamily&quot;,&quot;宋体&quot;)\t&#125;)&#125;) 1234567&lt;ul id=&quot;uu&quot;&gt;\t&lt;li&gt;第1个&lt;/li&gt;\t&lt;li&gt;第2个&lt;/li&gt;\t&lt;li&gt;第3个&lt;/li&gt;\t&lt;li&gt;第4个&lt;/li&gt;\t&lt;li&gt;第5个&lt;/li&gt;&lt;/ul&gt; 案例2需求： 点击按钮，改变value值 鼠标进入按钮中，改变按钮宽高 鼠标离开按钮背景颜色变成 green 123456789$(function() &#123;\t$(&#x27;#btn&#x27;).click(function()&#123; $(this).val(&#x27;改变了&#x27;)\t&#125;).mouseover(function()&#123; $(this).css(&#123;&quot;width&quot;:&quot;200px&quot;,&quot;height&quot;:&quot;100px&quot;&#125;)\t&#125;).mouseout(function()&#123; $(this).css(&quot;backgroundColor&quot;,&quot;green&quot;)\t&#125;)&#125;) 1&lt;input type=&quot;button&quot; name=&quot;&quot; value=&quot;显示效果&quot; id=&quot;btn&quot;&gt; 获取兄弟元素的几个方法 next() 当前元素之后紧挨着的第一个兄弟元素(👆) nextAll() 当前元素之后所有兄弟元素 prev() 当前元素之间的紧邻着的兄弟元素（👇） prevAll() 当前元素之前所有兄弟元素 siblings() 当前元素的所有兄弟元素","tags":["Jquery"],"categories":["前端"]},{"title":"ElementUI+Vue的配套使用","path":"/posts/67ef95a.html","content":"基于webpack的element-ui组件 &amp;&amp; vue 搭建开发环境 1.安装webpack1npm install -g webpack 2.安装vue-clivue-cli： 是vue.js的脚手架，用于自动生成vue.js模板工程 使用步骤： 安装vue-cli 1npm install -g vue-cli 使用vue-cli构建项目 1vue init webpack project-name //创建一个基于webpack模板的名叫project-name的项目 安装项目依赖 123cd project-namenpm installnpm run dev 此时在浏览器打开： localhost:8080就可以看到对应的页面 但这个时候只能在本地跑，如果在服务器上访问 此时需要执行 1npm run build 3.安装element-ui1npm i element-ui@next -D 4.开始使用 接下来就可以参照Element-UI的官方文档上手开发了 main.js 完整引入 1234// 在引入 Element 时，可以传入一个全局配置对象。该对象目前支持 size 与 zIndex 字段。size 用于改变组件的默认尺寸，zIndex 设置弹框的初始 z-index（默认值：2000）。按照引入 Element 的方式，具体操作如下：import Vue from &#x27;vue&#x27;;import Element from &#x27;element-ui&#x27;;Vue.use(Element, &#123; size: &#x27;small&#x27;, zIndex: 3000 &#125;); 按需引入 123 # 按需求引入 # 首先，安装 babel-plugin-componentnpm install babel-plugin-component -D 将 .babelrc 修改成这个 123456789101112&#123; &quot;presets&quot;: [[&quot;es2015&quot;, &#123; &quot;modules&quot;: false &#125;]], &quot;plugins&quot;: [ [ &quot;component&quot;, &#123; &quot;libraryName&quot;: &quot;element-ui&quot;, &quot;styleLibraryName&quot;: &quot;theme-chalk&quot; &#125; ] ]&#125; npm run dev出现问题 Module build failed: Error: Couldn&#39;t find preset &quot;es2015&quot; relative to directory 12345678910111213Module build failed: Error: Couldn&#x27;t find preset &quot;es2015&quot; relative todirectory &quot;C:\\\\Users\\\\董\\\\Desktop\\\\project-name&quot; at C:\\Users\\董\\Desktop\\project-name ode_modules\\babel-core\\lib\\transformation\\file\\options\\option-manager.js:293:19 at Array.map (&lt;anonymous&gt;) at OptionManager.resolvePresets (C:\\Users\\董\\Desktop\\project-name ode_modules\\babel-core\\lib\\transformation\\file\\options\\option-manager.js:275:20) at OptionManager.mergePresets (C:\\Users\\董\\Desktop\\project-name ode_modules\\babel-core\\lib\\transformation\\file\\options\\option-manager.js:264:10) at OptionManager.mergeOptions (C:\\Users\\董\\Desktop\\project-name ode_modules\\babel-core\\lib\\transformation\\file\\options\\option-manager.js:249:14) at OptionManager.init (C:\\Users\\董\\Desktop\\project-name ode_modules\\babel-core\\lib\\transformation\\file\\options\\option-manager.js:368:12) at File.initOptions (C:\\Users\\董\\Desktop\\project-name ode_modules\\babel-core\\lib\\transformation\\file\\index.js:212:65) at new File (C:\\Users\\董\\Desktop\\project-name ode_modules\\babel-core\\lib\\transformation\\file\\index.js:135:24) at Pipeline.transform (C:\\Users\\董\\Desktop\\project-name ode_modules\\babel-core\\lib\\transformation\\pipeline.js:46:16) at transpile (C:\\Users\\董\\Desktop\\project-name ode_modules\\babel-loader\\lib\\index.js:50:20) at Object.module.exports (C:\\Users\\董\\Desktop\\project-name ode_modules\\babel-loader\\lib\\index.js:173:20) 解决方案 1npm install --save-dev babel-preset-es2015 完整引入方式 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164import Vue from &#x27;vue&#x27;;import &#123; Pagination, Dialog, Autocomplete, Dropdown, DropdownMenu, DropdownItem, Menu, Submenu, MenuItem, MenuItemGroup, Input, InputNumber, Radio, RadioGroup, RadioButton, Checkbox, CheckboxButton, CheckboxGroup, Switch, Select, Option, OptionGroup, Button, ButtonGroup, Table, TableColumn, DatePicker, TimeSelect, TimePicker, Popover, Tooltip, Breadcrumb, BreadcrumbItem, Form, FormItem, Tabs, TabPane, Tag, Tree, Alert, Slider, Icon, Row, Col, Upload, Progress, Spinner, Badge, Card, Rate, Steps, Step, Carousel, CarouselItem, Collapse, CollapseItem, Cascader, ColorPicker, Transfer, Container, Header, Aside, Main, Footer, Timeline, TimelineItem, Link, Divider, Image, Calendar, Backtop, PageHeader, CascaderPanel, Loading, MessageBox, Message, Notification&#125; from &#x27;element-ui&#x27;;Vue.use(Pagination);Vue.use(Dialog);Vue.use(Autocomplete);Vue.use(Dropdown);Vue.use(DropdownMenu);Vue.use(DropdownItem);Vue.use(Menu);Vue.use(Submenu);Vue.use(MenuItem);Vue.use(MenuItemGroup);Vue.use(Input);Vue.use(InputNumber);Vue.use(Radio);Vue.use(RadioGroup);Vue.use(RadioButton);Vue.use(Checkbox);Vue.use(CheckboxButton);Vue.use(CheckboxGroup);Vue.use(Switch);Vue.use(Select);Vue.use(Option);Vue.use(OptionGroup);Vue.use(Button);Vue.use(ButtonGroup);Vue.use(Table);Vue.use(TableColumn);Vue.use(DatePicker);Vue.use(TimeSelect);Vue.use(TimePicker);Vue.use(Popover);Vue.use(Tooltip);Vue.use(Breadcrumb);Vue.use(BreadcrumbItem);Vue.use(Form);Vue.use(FormItem);Vue.use(Tabs);Vue.use(TabPane);Vue.use(Tag);Vue.use(Tree);Vue.use(Alert);Vue.use(Slider);Vue.use(Icon);Vue.use(Row);Vue.use(Col);Vue.use(Upload);Vue.use(Progress);Vue.use(Spinner);Vue.use(Badge);Vue.use(Card);Vue.use(Rate);Vue.use(Steps);Vue.use(Step);Vue.use(Carousel);Vue.use(CarouselItem);Vue.use(Collapse);Vue.use(CollapseItem);Vue.use(Cascader);Vue.use(ColorPicker);Vue.use(Transfer);Vue.use(Container);Vue.use(Header);Vue.use(Aside);Vue.use(Main);Vue.use(Footer);Vue.use(Timeline);Vue.use(TimelineItem);Vue.use(Link);Vue.use(Divider);Vue.use(Image);Vue.use(Calendar);Vue.use(Backtop);Vue.use(PageHeader);Vue.use(CascaderPanel);Vue.use(Loading.directive);Vue.prototype.$loading = Loading.service;Vue.prototype.$msgbox = MessageBox;Vue.prototype.$alert = MessageBox.alert;Vue.prototype.$confirm = MessageBox.confirm;Vue.prototype.$prompt = MessageBox.prompt;Vue.prototype.$notify = Notification;Vue.prototype.$message = Message; 5.例子 App.vue 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960&lt;template&gt; &lt;div id=&quot;app&quot;&gt; &lt;img src=&quot;./assets/logo.png&quot;&gt; &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt; &lt;el-button @click.native=&quot;startHacking&quot;&gt;Let&#x27;s do it&lt;/el-button&gt; &lt;div class=&quot;block&quot;&gt; &lt;span class=&quot;demonstration&quot;&gt;显示默认颜色&lt;/span&gt; &lt;span class=&quot;wrapper&quot;&gt; &lt;el-button type=&quot;success&quot;&gt;成功按钮&lt;/el-button&gt; &lt;el-button type=&quot;warning&quot;&gt;警告按钮&lt;/el-button&gt; &lt;el-button type=&quot;danger&quot;&gt;危险按钮&lt;/el-button&gt; &lt;el-button type=&quot;info&quot;&gt;信息按钮&lt;/el-button&gt; &lt;/span&gt; &lt;/div&gt; &lt;br/&gt; &lt;div class=&quot;block&quot;&gt; &lt;span class=&quot;demonstration&quot;&gt;hover 显示颜色&lt;/span&gt; &lt;span class=&quot;wrapper&quot;&gt; &lt;el-button :plain=&quot;true&quot; type=&quot;success&quot;&gt;成功按钮&lt;/el-button&gt; &lt;el-button :plain=&quot;true&quot; type=&quot;warning&quot;&gt;警告按钮&lt;/el-button&gt; &lt;el-button :plain=&quot;true&quot; type=&quot;danger&quot;&gt;危险按钮&lt;/el-button&gt; &lt;el-button :plain=&quot;true&quot; type=&quot;info&quot;&gt;信息按钮&lt;/el-button&gt; &lt;/span&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name: &#x27;App&#x27;, data()&#123; return&#123; msg:&#x27;我开始用element了&#x27; &#125; &#125;, methods:&#123; startHacking()&#123; this.$notify(&#123; title: &#x27;我上班了&#x27;, message: &#x27;真好！又开始秃头了&#x27;, duration: 6000 &#125;) &#125; &#125;&#125;&lt;/script&gt;&lt;style&gt;#app &#123; font-family: &#x27;Avenir&#x27;, Helvetica, Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; text-align: center; color: #2c3e50; margin-top: 60px;&#125;body &#123; font-family: Helvetica, sans-serif;&#125;&lt;/style&gt; main.js 123456789101112131415161718192021// The Vue build version to load with the `import` command// (runtime-only or standalone) has been set in webpack.base.conf with an alias.import Vue from &#x27;vue&#x27;import router from &#x27;./router&#x27;// import ElementUI from &#x27;element-ui&#x27;import &#123;Button,Notification&#125; from &#x27;element-ui&#x27;import &#x27;element-ui/lib/theme-chalk/index.css&#x27;import App from &#x27;./App&#x27; Vue.config.productionTip = false// 引入组件并且设置默认组件默认尺寸为small 弹框初始值为z-index=3000// Vue.use(ElementUI,&#123;size:&#x27;small&#x27;,zIndex:3000&#125;)Vue.use(Button)Vue.prototype.$notify = Notification/* eslint-disable no-new */new Vue(&#123; el: &#x27;#app&#x27;, router, components: &#123; App &#125;, template: &#x27;&lt;App/&gt;&#x27;&#125;)","tags":["Vue","ElementUI"],"categories":["前端"]},{"title":"解决多个github上传密钥识别问题","path":"/posts/884d0c65.html","content":"小结： 此功能对于两个本地文件夹上传到两个不同github有利我才写的这篇博客 因为想要上传到github，做第二个主题博客遇到了些难题 申请一个新的邮箱(此处我想到了126网易笨邮箱) 创建一个新的github账号 (此处省略无数根头发) vim ~/.ssh/id_rsa.pub 在setting里设置ssh密钥 然后更改repo地址 很不幸此时上传出现了问题 1Error: Permission to xxx denied to xxx 真是愁傻了人！！！！！！库里奥 于是 ↓ 百度程序员请战 三种种解决方式 换台电脑继续配置密钥 [显然我没有钱] 用虚拟机或者再在电脑上装双系统 [太浪费时间] 设置两个密钥（也可以多个看你心情） 显然第三种方式可取 步骤1创建一个新的密钥 eg: 创建一个叫aysee的密钥 12ssh-keygen -t rsa -C &quot;YOUR_EMAIL@YOUREMAIL.COM&quot; -f ~/.ssh/ayseecat ~/.ssh/aysee.pub 步骤2 新建仓库 然后把显示出来的密钥粘贴到github 的setting SSH密钥里 步骤3在电脑**~&#x2F;.ssh&#x2F;**里 touch config 一个配置文件让git_bash 能看出来谁上传的(Host) 我看出来了很多悲剧的发生 1234567891011#Default GitHubHost github.comHostName github.comUser gitIdentityFile ~/.ssh/id_rsa#new githubHost github-boreas6HostName github.comUser gitIdentityFile ~/.ssh/aysee 其中 Host 和 IdentityFile 非常重要 [笨机器识别就靠这玩意] 步骤4 修改主题配置根目录文件 +++: 仓库名×××××××××××: 仓库地址 1234deploy: type: git repository: git@github-boreas6: +++/×××××××××××.git branch: master 注意： 这里的不是github.com而是github-boreas6上传到 github 的，对仓库有读写权的现在两位 完美！结束 1234567891011Enumerating objects: 69, done.Counting objects: 100% (69/69), done.Delta compression using up to 4 threadsCompressing objects: 100% (49/49), done.Writing objects: 100% (69/69), 348.86 KiB | 813.00 KiB/s, done.Total 69 (delta 20), reused 0 (delta 0)remote: Resolving deltas: 100% (20/20), done.To github-boreas6:+++/×××××××××××.git * [new branch] HEAD -&gt; masterBranch &#x27;master&#x27; set up to track remote branch &#x27;master&#x27; from &#x27;git@github-boreas6:+++/×××××××××××.git&#x27;.INFO Deploy done: git 总结感觉把博客加上了吉他谱模块造成请求太多而卡顿于是另开一个博客 链接我新的网抑云: https://pdxwyy.github.io/ 快来看看吧 ^-^","tags":["Github本地多包上传"],"categories":["Bug解决"]},{"title":"Vue小项目Excel解析为Word","path":"/posts/a0114c0d.html","content":"分析前段时间有一朋友说有个需求，所以我就利用自己所学的vue做一个实战练习 需求：excel考试题目转换成word 需要的依赖 : xlsx的一个包 因为涉及转换而且利用官方推荐的迅捷pdf转换器转换的只是一张表内容，内容根本无法全覆盖多列内容，因为涉及好几个单元格的拼接，所以只好利用插件解析成数组对象，然后导出 思路 利用这个xslx包把excel表第一页解析成对象数组 然后利用v-for遍历显示在html页面当中去 导出.doc 文件 问题 文档里必须经过修改首行字符为zh [已解决] li标签导出出现错乱问题 [已解决] 一开始认为导出文件直接 ctrl-v + ctrl-c 结果出现系统内存分配不足卡机，我也不知道是不是自己电脑配置方面落伍了，感觉应该是数据量太大，遍历占中CPU率太高，所以选择用&#39;data:application/vnd.ms-word;charset=utf-8,&#39;格式导出word文档 [已解决] 源文件点击下载 源代码123456789101112131415161718192021&lt;script src=&quot;https://cdn.staticfile.org/vue/2.2.2/vue.min.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;https://unpkg.com/xlsx/dist/xlsx.full.min.js&quot;&gt;&lt;/script&gt;&lt;div id=&quot;app&quot;&gt;\t&lt;input type=&quot;file&quot; ref=&quot;upload&quot; accept=&quot;.xls,.xlsx&quot; class=&quot;outputlist_upload&quot;&gt;\t&lt;input type=&quot;text&quot; name=&quot;&quot; v-model=&quot;filename&quot; style=&quot;text-align: center;&quot;&gt;&lt;span&gt;.doc&lt;/span&gt;\t&lt;button type=&quot;button&quot; @click=&quot;getOutword&quot;&gt;导出word&lt;/button&gt;\t&lt;div id=&quot;downloadwrap&quot;&gt; &lt;ul&gt; &lt;div v-for=&quot;item in outputs&quot; :key=&quot;item.id&quot;&gt; &lt;h4&gt;&#123;&#123;item.id&#125;&#125;.&amp;nbsp;&#123;&#123;item.title&#125;&#125;(&amp;nbsp;)&amp;nbsp;&lt;small style=&quot;color: #999&quot;&gt;[&#123;&#123;item.types&#125;&#125;]&lt;/small&gt;&lt;/h4&gt; &lt;p&gt;A:&#123;&#123;item.a_select&#125;&#125;&lt;/p&gt; &lt;p&gt;B:&#123;&#123;item.b_select&#125;&#125;&lt;/p&gt; &lt;p&gt;C:&#123;&#123;item.c_select&#125;&#125;&lt;p&gt; &lt;p&gt;D:&#123;&#123;item.d_select&#125;&#125;&lt;/p&gt; &lt;div&gt; 正确答案：&lt;font color=&quot;red&quot;&gt;&#123;&#123;item.answer&#125;&#125;&lt;/font&gt; &lt;/div&gt; &lt;/div&gt; &lt;/ul&gt;\t&lt;/div&gt;&lt;/div&gt; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980var vm = new Vue(&#123;\tel:&#x27;#app&#x27;,\tdata()&#123; return&#123; filename:&#x27;&#x27;, outputs:[] &#125;\t&#125;,\tmounted() &#123; this.$refs.upload.addEventListener(&#x27;change&#x27;, e =&gt; &#123;//绑定监听表格导入事件 this.readExcel(e); &#125;)\t&#125;,\tmethods:&#123; readExcel(e) &#123;//表格导入 var that = this; const files = e.target.files; console.log(files); if(files.length&lt;=0)&#123;//如果没有文件名 return false; &#125;else if(!/\\.(xls|xlsx)$/.test(files[0].name.toLowerCase()))&#123; this.$Message.error(&#x27;上传格式不正确，请上传xls或者xlsx格式&#x27;); return false; &#125; const fileReader = new FileReader(); fileReader.onload = (ev) =&gt; &#123; try &#123; const data = ev.target.result; const workbook = XLSX.read(data, &#123; type: &#x27;binary&#x27; &#125;); const wsname = workbook.SheetNames[0];//取第一张表 const ws = XLSX.utils.sheet_to_json(workbook.Sheets[wsname]);//生成json表格内容 console.log(ws); that.outputs = [];//清空接收数据 for(var i= 0;i&lt;ws.length;i++)&#123; var sheetData = &#123; types: ws[i].type, id: ws[i].id, title: ws[i].title, a_select: ws[i].A, b_select: ws[i].B, c_select: ws[i].C, d_select: ws[i].D, answer: ws[i].answer, dif: ws[i].dif, name: ws[i].name &#125; that.outputs.push(sheetData); &#125; this.$refs.upload.value = &#x27;&#x27;; &#125; catch (e) &#123; return false; &#125; &#125;; fileReader.readAsBinaryString(files[0]); &#125;, getOutword:function(id,fileName)&#123; /* id ：文档dom节点 fileName：文件名称(.doc) */ var header = &quot;&lt;html xmlns:o=&#x27;urn:schemas-microsoft-com:office:office&#x27; &quot; + &quot;xmlns:w=&#x27;urn:schemas-microsoft-com:office:word&#x27; &quot; + &quot;xmlns=&#x27;http://www.w3.org/TR/REC-html40&#x27;&gt;&quot; + &quot;&lt;head&gt;&lt;meta charset=&#x27;utf-8&#x27;&gt;&lt;title&gt;Export HTML to Word Document with JavaScript&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&quot; var footer = &#x27;&lt;/body&gt;&lt;/html&gt;&#x27; var sourceHTML = header + document.getElementById(&#x27;downloadwrap&#x27;).innerHTML + footer var source = &#x27;data:application/vnd.ms-word;charset=utf-8,&#x27; + encodeURIComponent(sourceHTML) var fileDownload = document.createElement(&#x27;a&#x27;) document.body.appendChild(fileDownload) fileDownload.href = source fileDownload.download = this.filename + &#x27;.doc&#x27; // 下载名称 fileDownload.click() document.body.removeChild(fileDownload) &#125;\t&#125;,&#125;) 演示地址","tags":["Vue对表格解析项目打印"],"categories":["前端"]},{"title":"Vue路由","path":"/posts/92619e7d.html","content":"前端路由和后端路由的概念 后端路由： 对于普通网站，所有的链接都是URL地址，所有的URL地址都对应服务器上对应的资源 前端路由： 对于单页面应用程序来说，主要通过URL的hash(#号),来实现不同页面之间的切换，同时，hash有一个特点，HTTP请求中不包含hash相关的内容，所以单页面程序中的页面跳转主要用hash来实现 在单页面应用程序中，这种通过hash改变切换页面的方式，称作前端路由（区别于后端路由） vue-router Vue-router3.0安装方式： 外引：https://unpkg.com/vue-router@3.0.0/dist/vue-router.js 12&lt;script src=&quot;/path/to/vue.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;https://unpkg.com/vue-router@3.0.0/dist/vue-router.js&quot;&gt;&lt;/script&gt; webpack 打包 1npm install vue-router 1234import Vue from &#x27;vue&#x27;import VueRouter from &#x27;vue-router&#x27;Vue.use(VueRouter) 构建开发版1234git clone https://github.com/vuejs/vue-router.git node_modules/vue-routercd node_modules/vue-routernpm installnpm run build 基本用法123456789101112131415161718192021222324252627282930&lt;div id=&quot;app&quot;&gt;\t&lt;!-- 地址 --&gt;\t&lt;p&gt;&lt;font color=&quot;red&quot;&gt;*&lt;/font&gt;地址:&lt;span&gt;&#123;&#123;route_path&#125;&#125;&lt;/span&gt;&lt;/p&gt;\t&lt;font color=&quot;red&quot;&gt;地址无刷新不会变化，这也正印证了上边的特性&lt;/font&gt;\t&lt;router-link to=&quot;/login&quot;&gt;登录&lt;/router-link&gt; &lt;router-link to=&quot;/register&quot;&gt;注册&lt;/router-link&gt;&lt;br&gt;\t&lt;router-view&gt;&lt;/router-view&gt;&lt;/div&gt;&lt;template id=&quot;login&quot;&gt;\t&lt;div&gt; &lt;label&gt;用户名&lt;/label&gt; &lt;input type=&quot;text&quot; name=&quot;&quot;&gt;&lt;br&gt; &lt;label&gt;密码&lt;/label&gt; &lt;input type=&quot;text&quot; name=&quot;&quot;&gt;&lt;br&gt; &lt;button type=&quot;button&quot;&gt;登录&lt;/button&gt;\t&lt;/div&gt;&lt;/template&gt;&lt;template id=&quot;register&quot;&gt;\t&lt;div&gt; &lt;label&gt;用户名:&lt;/label&gt; &lt;input type=&quot;text&quot; name=&quot;&quot;&gt;&lt;br&gt; &lt;label&gt;密码:&lt;/label&gt; &lt;input type=&quot;text&quot; name=&quot;&quot;&gt;&lt;br&gt; &lt;label&gt;确认密码:&lt;/label&gt; &lt;input type=&quot;text&quot; name=&quot;&quot;&gt;&lt;br&gt; &lt;button type=&quot;button&quot;&gt;注册&lt;/button&gt; &lt;/div&gt;&lt;/template&gt; 1234567891011121314151617181920212223242526272829303132333435//创建一个路由对象，当导入vue-router包之后，在window 全局对象中就有了一个路由构造函数 vueRouter// 在new一个路由对象的时候，可以为构造函数，传递一个配置对象var login = &#123;\ttemplate:&#x27;#login&#x27;&#125;var register = &#123;\ttemplate:&#x27;#register&#x27;&#125;var routerObj = new VueRouter(&#123;\troutes:[\t// 每个路由规则，都是一个对象，这个规则对象身上有两个必须的属性\t// 1. path: 表示坚挺的路由链接地址\t// 2. component 表示如果匹配则展示对应组件(必须是组件模板对象而不是组件名称) &#123;path:&#x27;/login&#x27;,component:login&#125;, &#123;path:&#x27;/register&#x27;,component:register&#125;,\t] //表示路由匹配规则&#125;)var vm = new Vue(&#123;\tel:&#x27;#app&#x27;,\tdata:&#123; route_path: &#x27;&#x27;\t&#125;,\tmethods:&#123;\t&#125;,\tcreated()&#123; this.route_path = this.$route.path\t&#125;,\tcomponents:&#123; login, register\t&#125;,\t// 将路由规则对象，注册到vm实例上，用来监听URL地址的变化，然后展示对应的组件\trouter:routerObj&#125;) 这样默认展示根路径 /，很别扭 12345678910var routerObj = new VueRouter(&#123;\troutes:[\t//表示路由匹配规则\t// 重定向 / 的 url地址 利用redirect 不属于Node里的redirect\t// 目的：手动修改哈希值 &#123;path:&#x27;/&#x27;,redirect:&#x27;/login&#x27;&#125; &#123;path:&#x27;/login&#x27;,component:login&#125;, &#123;path:&#x27;/register&#x27;,component:register&#125;,\t] &#125;) 需求1：设置选中路由高亮12345678910&lt;style&gt;\t.router-link-active&#123; color:red; font-weight:800; font-style: italic; font-size:20px; text-decoration: underline; background-color:green;\t&#125;&lt;/style&gt; 1234567891011var routerObj = new VueRouter(&#123;\troutes:[\t//表示路由匹配规则\t// 重定向 / 的 url地址 利用redirect 不属于Node里的redirect\t// 目的：手动修改哈希值 &#123;path:&#x27;/&#x27;,redirect:&#x27;/login&#x27;&#125; &#123;path:&#x27;/login&#x27;,component:login&#125;, &#123;path:&#x27;/register&#x27;,component:register&#125;,\t],\tlinkActiveClass:&#x27;myactive&#x27;&#125;) 需求2: 为路由切换加入动画1234567891011121314&lt;style&gt;\t.v-enter,\t.v-leave&#123; opacity: 0; transform: translateX(140px)\t&#125;\t.v-enter-active,\t.v-leave-active&#123; transition: all 0.4s ease\t&#125;&lt;/style&gt;&lt;transition mode=&quot;out-in&quot;&gt;\t&lt;router-view&gt;&lt;/router-view&gt;&lt;/transition&gt; 路由规则中定义参数 $route.query 123456&lt;div id=&quot;app&quot;&gt;\t&lt;!-- 如果在路由中，使用传参，不需要修改path --&gt;\t&lt;router-link to=&quot;/login?id=1&amp;name=dong&quot;&gt;登录&lt;/router-link&gt;\t&lt;router-link to=&quot;/register&quot;&gt;注册&lt;/router-link&gt;\t&lt;router-view&gt;&lt;/router-view&gt;&lt;/div&gt; 123456789101112131415161718192021222324var login = &#123;\ttemplate:&#x27;&lt;h1&gt;登录---ID：&#123;&#123;$route.query.id&#125;&#125;---用户：&#123;&#123;$route.query.name&#125;&#125;&lt;/h1&gt;&#x27;,\tcreated()&#123; console.log(this.$route)\t&#125;&#125;var register = &#123;\ttemplate:&#x27;&lt;h1&gt;注册&lt;/h1&gt;&#x27;&#125;var router = new VueRouter(&#123;\troutes:[ &#123;path:&#x27;/&#x27;,redirect: &#x27;/login&#x27;&#125;, &#123;path:&#x27;/login&#x27;,component: login&#125;, &#123;path:&#x27;/register&#x27;,component: register&#125;\t]&#125;)var vm = new Vue(&#123;\tel:&#x27;#app&#x27;,\tdata:&#123;\t&#125;,\tmethods:&#123;&#125;,\trouter:router&#125;) $route.params123456&lt;div id=&quot;app&quot;&gt;\t&lt;!-- 如果在路由中，使用传参，不需要修改path --&gt;\t&lt;router-link to=&quot;/login/:id&quot;&gt;登录&lt;/router-link&gt;\t&lt;router-link to=&quot;/register&quot;&gt;注册&lt;/router-link&gt;\t&lt;router-view&gt;&lt;/router-view&gt;&lt;/div&gt; 123456789101112131415161718192021222324var login = &#123;\ttemplate:&#x27;&lt;h1&gt;登录---&#123;&#123;$route.params.id&#125;&#125;&lt;/h1&gt;&#x27;,\tcreated()&#123; console.log(this.$route)\t&#125;&#125;var register = &#123;\ttemplate:&#x27;&lt;h1&gt;注册&lt;/h1&gt;&#x27;&#125;var router = new VueRouter(&#123;\troutes:[ &#123;path:&#x27;/&#x27;,component: login&#125;, &#123;path:&#x27;/login/12&#x27;,component: login&#125;, &#123;path:&#x27;/register&#x27;,component: register&#125;\t]&#125;)var vm = new Vue(&#123;\tel:&#x27;#app&#x27;,\tdata:&#123;\t&#125;,\tmethods:&#123;&#125;,\trouter:router&#125;) 路由的嵌套(children)使用 children 属性 ,实现子路由，同时，子路由的path前面，不要带 &#x2F; ，否则永远以根路径开始请求，这样不方便用户理解 url 地址 123456789101112&lt;div id=&quot;app&quot;&gt;\t&lt;router-link to=&quot;/account&quot;&gt;Account&lt;/router-link&gt;\t&lt;router-view&gt;&lt;/router-view&gt;&lt;/div&gt;&lt;template id=&quot;temp1&quot;&gt;\t&lt;div&gt; &lt;h1&gt;这是Account组件&lt;/h1&gt; &lt;router-link to=&quot;/account/login&quot;&gt;登录&lt;/router-link&gt; &lt;router-link to=&quot;/account/register&quot;&gt;注册&lt;/router-link&gt; &lt;router-view&gt;&lt;/router-view&gt;\t&lt;/div&gt;&lt;/template&gt; 1234567891011121314151617181920212223242526272829var account = &#123;\ttemplate:&#x27;#temp1&#x27;&#125;var login = &#123;\ttemplate:&#x27;&lt;h4&gt;登录&lt;/h4&gt;&#x27;&#125;var register = &#123;\ttemplate:&#x27;&lt;h4&gt;注册&lt;/h4&gt;&#x27;&#125;var router = new VueRouter(&#123;\troutes:[ &#123; path:&#x27;/account&#x27;, component:account, children:[ &#123;path:&#x27;login&#x27;,component:login&#125;, &#123;path:&#x27;register&#x27;,component:register&#125; ] &#125; // &#123;path:&#x27;/account/login&#x27;,component:login&#125;, // &#123;path:&#x27;/account/register&#x27;,component:register&#125;\t]&#125;)\tvar vm = new Vue(&#123;\tel:&#x27;#app&#x27;,\tdata:&#123;&#125;,\tmethods:&#123;&#125;,\trouter:router&#125;) 使用命名视图实现经典布局1234567891011121314151617181920212223242526&lt;style type=&quot;text/css&quot;&gt;\thtml,body&#123; margin: 0; padding: 0\t&#125;\th1&#123; margin: 0; padding: 0; font-size: 16px\t&#125;\t.header&#123; height: 80px; background-color: orange\t&#125;\t.container&#123; display: flex; height: 600px;\t&#125;\t.left&#123; background-color: lightgreen; flex:2;\t&#125;\t.main&#123; background-color: lightpink; flex: 8\t&#125; 12345678910111213141516171819202122&lt;div id=&quot;app&quot;&gt;\t&lt;router-view&gt;&lt;/router-view&gt;\t&lt;div class=&quot;container&quot;&gt; &lt;router-view name=&quot;left&quot;&gt;&lt;/router-view&gt; &lt;router-view name=&quot;main&quot;&gt;&lt;/router-view&gt;\t&lt;/div&gt;&lt;/div&gt;&lt;template id=&quot;header&quot;&gt;\t&lt;div class=&quot;header&quot;&gt; 头部区域\t&lt;/div&gt;&lt;/template&gt;&lt;template id=&quot;leftBox&quot;&gt;\t&lt;div class=&quot;left&quot;&gt; 左边区域\t&lt;/div&gt;&lt;/template&gt;&lt;template id=&quot;MainBox&quot;&gt;\t&lt;div class=&quot;main&quot;&gt; 主区域\t&lt;/div&gt;&lt;/template&gt; 12345678910111213141516171819202122232425262728293031var header = &#123;\ttemplate:&#x27;#header&#x27;&#125;var leftBox = &#123;\ttemplate:&#x27;#leftBox&#x27;&#125;var MainBox = &#123;\ttemplate:&#x27;#MainBox&#x27;&#125;var router = new VueRouter(&#123;\troutes:[ // &#123;path:&#x27;/&#x27;,component: header&#125;, // &#123;path:&#x27;/left&#x27;,component: header&#125;, // &#123;path:&#x27;/main&#x27;,component: header&#125;, &#123; path:&#x27;/&#x27;, components:&#123; &#x27;default&#x27;: header, &#x27;left&#x27;: leftBox, &#x27;main&#x27;: MainBox &#125; &#125;\t]&#125;)var vm = new Vue(&#123;\tel:&#x27;#app&#x27;,\tdata:&#123;\t&#125;,\tmethods:&#123;&#125;,\trouter:router&#125;) 效果链接 案例： keyup事件实现方式1123456&lt;div id=&quot;app&quot;&gt;\t&lt;!-- 监听文本框数据改变拼接成fullname --&gt;\t&lt;input type=&quot;text&quot; name=&quot;&quot; v-model=&quot;firstname&quot; @keyup=&quot;getFullName&quot;&gt;+\t&lt;input type=&quot;text&quot; v-model=&quot;lastname&quot; name=&quot;&quot; @keyup=&quot;getFullName&quot;&gt;\t&lt;input type=&quot;text&quot; v-model=&quot;fullname&quot; name=&quot;&quot;&gt;&lt;/div&gt; 12345678910111213var vm = new Vue(&#123;\tel:&#x27;#app&#x27;,\tdata:&#123; firstname:&#x27;&#x27;, lastname:&#x27;&#x27;, fullname:&#x27;&#x27;\t&#125;,\tmethods:&#123; getFullName:function()&#123; this.fullname = this.firstname+&#x27;-&#x27;+ this.lastname &#125;\t&#125;,&#125;) 效果 方式2123456&lt;div id=&quot;app&quot;&gt;\t&lt;!-- 监听文本框数据改变拼接成fullname --&gt;\t&lt;input type=&quot;text&quot; name=&quot;&quot; v-model=&quot;firstname&quot;&gt;+\t&lt;input type=&quot;text&quot; v-model=&quot;lastname&quot; name=&quot;&quot;&gt;\t&lt;input type=&quot;text&quot; v-model=&quot;fullname&quot; name=&quot;&quot;&gt;&lt;/div&gt; 1234567891011121314151617181920var vm = new Vue(&#123;\tel:&#x27;#app&#x27;,\tdata:&#123; firstname:&#x27;&#x27;, lastname:&#x27;&#x27;, fullname:&#x27;&#x27;\t&#125;,\tmethods:&#123;\t&#125;,\twatch:&#123; // 使用这个属性，可以监视watch data事件的变化，然后触发方法 &#x27;firstname&#x27;:function(newVal,oldValue)&#123; // this.fullname = this.firstname + &#x27;-&#x27; + this.lastname this.fullname = newVal + &#x27;-&#x27; + this.lastname &#125;, &#x27;lastname&#x27;:function(newVal)&#123; this.fullname = this.firstname + &#x27;-&#x27; + newVal &#125;\t&#125;&#125;) 方式3123456&lt;div id=&quot;app&quot;&gt;\t&lt;!-- 监听文本框数据改变拼接成fullname --&gt;\t&lt;input type=&quot;text&quot; name=&quot;&quot; v-model=&quot;firstname&quot;&gt;+\t&lt;input type=&quot;text&quot; v-model=&quot;lastname&quot; name=&quot;&quot;&gt;\t&lt;input type=&quot;text&quot; v-model=&quot;fullname&quot; name=&quot;&quot; readonly&gt;&lt;/div&gt; 12345678910111213141516171819var vm = new Vue(&#123;\tel:&#x27;#app&#x27;,\tdata:&#123; firstname:&#x27;&#x27;, lastname:&#x27;&#x27;,\t&#125;,\tmethods:&#123;\t&#125;,\tcomputed:&#123; // 在computed 中，可以定义一些属性，这些属性叫做【计算属性】 // 本质是一个方法，计算的时候把名称直接当作属性来使用，并不会当作方法来调用 // 注意1: 计算属性，在引用的时候，一定不要加&#123;&#125;去调用，直接把他当作普通属性去使用就好了 // 注意2： 只要计算属性，这个function 内部，所用到的任何data的变化会 【重新计算】 // 注意3： 计算属性求值结果会缓存，方便下次直接使用，如果计算属性方法中，所有来的任何数据没发生变化，则不会重新对计算求值 &#x27;fullname&#x27;: function()&#123; return this.firstname + &#x27;-&#x27; + this.lastname &#125;\t&#125;&#125;) 通过 watch 监听路由变化代码12345678&lt;div id=&quot;app&quot;&gt;\t&lt;router-link to=&quot;/login&quot;&gt;登录&lt;/router-link&gt;\t&lt;router-link to=&quot;/register&quot;&gt;注册&lt;/router-link&gt;\t&lt;!-- 需求：监听路由改变做出反应 --&gt;\t&lt;router-view&gt;&lt;/router-view&gt;&lt;/div&gt; 12345678910111213141516171819202122232425262728293031const login = &#123;\ttemplate:&#x27;&lt;h4&gt;这是登录组件，这个组件是爸爸我开发的&lt;/h4&gt;&#x27;&#125;const register = &#123;\ttemplate:&#x27;&lt;h4&gt;这是注册组件，这个组件是某某开发的&lt;/h4&gt;&#x27;&#125;const router = new VueRouter(&#123;\troutes:[ &#123;path:&#x27;/&#x27;,component:login&#125;, &#123;path:&#x27;/login&#x27;,component: login&#125;, &#123;path:&#x27;/register&#x27;,component: register&#125;\t]&#125;)var vm = new Vue(&#123;\tel:&#x27;#app&#x27;,\tdata:&#123;\t&#125;,\tmethods:&#123;&#125;,\trouter:router,\twatch:&#123; &#x27;$route.path&#x27;:function(newVal,oldVal)&#123; // console.log(newVal+&#x27;-&#x27;+oldVal) if (newVal===&quot;/login&quot;) &#123; alert(&#x27;欢迎进入登录页面^-^&#x27;) &#125;else if(newVal === &#x27;/register&#x27;)&#123; alert(&#x27;欢迎进入注册页面^-^&#x27;) &#125; &#125;\t&#125;&#125;) 总结 computed属性的结果会缓存，除非以来的响应式属性发生变化才会重新计算算，主要当作属性来用 method 方法表示一个具体的操作，主要书写业务逻辑 watch 一个对象，就是需要观察的表达式，主要用来监听某些特定数据的变化，，从而进行某些逻辑操作，可以视为 computed + method","tags":["Vue路由"],"categories":["Vue2.0"]},{"title":"vue组件","path":"/posts/dd3b78a2.html","content":"定义vue组件 组件：为了拆分vue实例的代码量，让我们不同的组件划分不同的功能模块，将来我们要什么样的功能直接调用组件即可！ 组件化和模块化的不同： 模块化：是从代码逻辑进行划分，方便代码分层开发，保证每个功能模块的只职能单一 组件化： 是从UI界面角度进行划分的，前端的组件化方便UI组件的重用 创建全局组件 第一种方式1234567891011// 第一种// 使用Vue.extend 来创建全局vue组件var com1 = Vue.extend(&#123;\ttemplate:&#x27;&lt;h3&gt;这是使用Vue.extend创建的组件&lt;/h3&gt;&#x27; //通过template 属性。指定组件要展示的HTML结构&#125;)// 使用Vue.component(&#x27;组件名称&#x27;，创建出来的组件模板对象)// 如果使用Vue.component定义全局组件的时候，组件名使用了驼峰命名，则在引用组件的时候，需要把大学的驼峰改成小写字母，同时用 &#x27;-&#x27;连接// 如果不是，直接拿名称命名就行Vue.component(&#x27;myCom1&#x27;,com1) 第二种方式 12345// 第二种// 组件模板必须有且只有一个唯一的根元素Vue.component(&#x27;myCom2&#x27;,&#123;\ttemplate:&#x27;&lt;div&gt;&lt;h3&gt;这是使用Vue.component创建的组件&lt;/h3&gt;&lt;/div&gt;&#x27;&#125;) 第三种方式 123456789&lt;div id=&quot;app&quot;&gt;\t&lt;my-com3&gt;&lt;/my-com3&gt;&lt;/div&gt;&lt;template id=&quot;tmp1&quot;&gt;\t&lt;div&gt; &lt;h1&gt;这是通过template 元素在外部定义的组件元素，这个方式，有代码的指示提示和高亮&lt;/h1&gt; &lt;h4&gt;好用，不错！&lt;/h4&gt;\t&lt;/div&gt;&lt;/template&gt; 1234567891011// 第三种Vue.component(&#x27;myCom3&#x27;,&#123;\ttemplate:&#x27;#tmp1&#x27;&#125;)var vm = new Vue(&#123;\tel:&#x27;#app&#x27;,\tdata:&#123;\t&#125;,\tmethods:&#123;&#125;,&#125;) 使用vue实例的render方法渲染组件(替换app里所有内容)123&lt;div id=&quot;app&quot;&gt;\t&lt;/div&gt; 12345678910111213var login = &#123;\ttemplate: &#x27;&lt;h1&gt;登录组件&lt;/h1&gt;&#x27;&#125;var vm = new Vue(&#123;\tel:&#x27;#app&#x27;,\tdata:&#123;&#125;,\tmethods:&#123;&#125;,\trender: function(createElements)&#123; // createElements 是一个方法，调用它，能够把指定的组件模板渲染为html结构 return createElements(login) // 主题：这里return结果会自然替换el指定的容器\t&#125;&#125;) 创建组件使用components定义私有组12345678&lt;div id=&quot;app-2&quot;&gt;\t&lt;login&gt;&lt;/login&gt;&lt;/div&gt;&lt;template id=&quot;login&quot;&gt;\t&lt;div&gt; &lt;label&gt;用户名：&lt;/label&gt;&lt;input type=&quot;text&quot; name=&quot;&quot;&gt;&lt;br&gt;&lt;label&gt;密码：&lt;/label&gt;&lt;input type=&quot;text&quot; name=&quot;&quot;&gt;&lt;br&gt;&lt;button type=&quot;button&quot;&gt;登录&lt;/button&gt;\t&lt;/div&gt;&lt;/template&gt; 123456789101112var vm2 = new Vue(&#123;\tel:&#x27;#app-2&#x27;,\tdata:&#123;&#125;,\tmethods:&#123;&#125;,\tdirectives:&#123;&#125;,\tcomponents:&#123; login:&#123; template:&#x27;#login&#x27; &#125;\t&#125;,\tfilters:&#123;&#125;&#125;) 组件中的data注册一个定时器组件案例拿计时器案例讲：如果按照全局组件声明一个对象dataObj,count的值会相互影响，导致同一值 123456789101112var dataObj =&#123;count:0&#125;Vue.component(&#x27;counter&#x27;,&#123;\ttemplate: &#x27;#tmp_count&#x27;,\tdata: function()&#123; return dataObj\t&#125;\tmethods:&#123; increament:function()&#123; this.count++ &#125;\t&#125;&#125;) 结果 正确定义方法1234567891011&lt;div id=&quot;app&quot;&gt;\t&lt;counter&gt;&lt;/counter&gt;\t&lt;counter&gt;&lt;/counter&gt;\t&lt;counter&gt;&lt;/counter&gt;&lt;/div&gt;&lt;template id=&quot;tmp_count&quot;&gt;\t&lt;div&gt; &lt;input type=&quot;button&quot; name=&quot;&quot; value=&quot;+1&quot; @click=&quot;increament&quot;&gt; &lt;h3&gt;&#123;&#123;count&#125;&#125;&lt;/h3&gt;\t&lt;/div&gt;&lt;/template&gt; 1234567891011121314// 注册一个计数器组件counter，每当点击data值里的count+1Vue.component(&#x27;counter&#x27;,&#123;\ttemplate: &#x27;#tmp_count&#x27;,\tdata: function()&#123; return&#123; count:0 &#125;\t&#125;,\tmethods:&#123; increament:function()&#123; this.count++ &#125;\t&#125;&#125;) 结果 演示 实现不同组件的切换利用v-if &amp; v-else 实现注册和登录切换12345678910111213141516&lt;div id=&quot;app&quot;&gt;\t&lt;a href=&quot;&quot; @click.prevent=&quot;flag=true&quot;&gt;登录&lt;/a&gt;\t&lt;a href=&quot;&quot; @click.prevent=&quot;flag=false&quot;&gt;注册&lt;/a&gt;\t&lt;login v-if=&quot;flag&quot;&gt;&lt;/login&gt;\t&lt;register v-else=&quot;flag&quot;&gt;&lt;/register&gt;&lt;/div&gt;&lt;template id=&quot;login&quot;&gt;\t&lt;div&gt; &lt;label&gt;用户名：&lt;/label&gt;&lt;input type=&quot;text&quot; name=&quot;&quot;&gt;&lt;br&gt;&lt;label&gt;密码：&lt;/label&gt;&lt;input type=&quot;text&quot; name=&quot;&quot;&gt;&lt;br&gt;&lt;button type=&quot;button&quot;&gt;登录&lt;/button&gt;\t&lt;/div&gt;&lt;/template&gt;&lt;template id=&quot;register&quot;&gt;\t&lt;div&gt; &lt;label&gt;用户名：&lt;/label&gt;&lt;input type=&quot;text&quot; name=&quot;&quot;&gt;&lt;br&gt;&lt;label&gt;密码：&lt;/label&gt;&lt;input type=&quot;text&quot; name=&quot;&quot;&gt;&lt;br&gt;&lt;label&gt;确认密码：&lt;/label&gt;&lt;input type=&quot;text&quot; name=&quot;&quot;&gt;&lt;br&gt;&lt;button type=&quot;button&quot;&gt;注册&lt;/button&gt;\t&lt;/div&gt;&lt;/template&gt; 1234567891011121314// 登录注册组件切换Vue.component(&#x27;login&#x27;,&#123;\ttemplate:&#x27;#login&#x27;&#125;)Vue.component(&#x27;register&#x27;,&#123;\ttemplate:&#x27;#register&#x27;&#125;)var vm = new Vue(&#123;\tel:&#x27;#app&#x27;,\tdata:&#123; flag:true\t&#125;,\tmethods:&#123;&#125;&#125;) 效果演示 利用vue提供的component 实现组件切换12345678910111213141516171819&lt;div id=&quot;app&quot;&gt;\t&lt;!-- Vue 提供了component，来展示对应的名称组件 --&gt;\t&lt;!-- component 是一个占位符 :is 属性，可以用来指定要展示的组件名称 --&gt;\t&lt;a href=&quot;&quot; @click.prevent=&quot;component_name=&#x27;login&#x27;&quot;&gt;登录&lt;/a&gt;\t&lt;a href=&quot;&quot; @click.prevent=&quot;component_name=&#x27;register&#x27;&quot;&gt;注册&lt;/a&gt;\t&lt;component :is=&quot;component_name&quot;&gt;&lt;/component&gt;\t&lt;/div&gt;&lt;template id=&quot;login&quot;&gt;\t&lt;div&gt; &lt;label&gt;用户名：&lt;/label&gt;&lt;input type=&quot;text&quot; name=&quot;&quot;&gt;&lt;br&gt;&lt;label&gt;密码：&lt;/label&gt;&lt;input type=&quot;text&quot; name=&quot;&quot;&gt;&lt;br&gt;&lt;button type=&quot;button&quot;&gt;登录&lt;/button&gt;\t&lt;/div&gt;&lt;/template&gt;&lt;template id=&quot;register&quot;&gt;\t&lt;div&gt; &lt;label&gt;用户名：&lt;/label&gt;&lt;input type=&quot;text&quot; name=&quot;&quot;&gt;&lt;br&gt;&lt;label&gt;密码：&lt;/label&gt;&lt;input type=&quot;text&quot; name=&quot;&quot;&gt;&lt;br&gt;&lt;label&gt;确认密码：&lt;/label&gt;&lt;input type=&quot;text&quot; name=&quot;&quot;&gt;&lt;br&gt;&lt;button type=&quot;button&quot;&gt;注册&lt;/button&gt;\t&lt;/div&gt;&lt;/template&gt; 1234567891011121314// 登录注册组件切换// 组件名称是字符串Vue.component(&#x27;login&#x27;,&#123;\ttemplate:&#x27;#login&#x27;&#125;)Vue.component(&#x27;register&#x27;,&#123;\ttemplate:&#x27;#register&#x27;&#125;)var vm = new Vue(&#123;\tel:&#x27;#app&#x27;,\tdata:&#123; component_name: &#x27;login&#x27;\t&#125;&#125;) 结果与第一种完全相同 总结目前，当前学习了几个vue提供的标签component,template,transition 组件动画过度12345678910111213141516&lt;style&gt;\t.v-enter,\t.v-leave&#123; opacity:0; transform: translateX(150px);\t&#125;\t.v-enter-active,\t.v-leave-active&#123; transition:all 0.5s ease\t&#125;&lt;/style&gt;&lt;!-- 通过 mode 属性，设置组件切换模式 --&gt;&lt;transition mode=&quot;out-in&quot;&gt;\t&lt;component :is=&quot;component_name&quot;&gt;&lt;/component&gt;&lt;/transition&gt; 演示： 父组件向子组件传值或方法 传值【案例：com1】： 通过定义props属性绑定 传方法【案例：com2】：this.$emit(‘组件定义的方法’,option) 123456789101112&lt;div id=&quot;app&quot;&gt;\t&lt;!-- 父组件可以在引用子组件的时候，通过属性绑定(:)的形式 ,把咱们需要传递给子组件的数据，以属性绑定的形式，传递到子组件内部，供子组件使用--&gt;\t&lt;com1 :parentmsg=&quot;msg&quot;&gt;&lt;/com1&gt;\t&lt;!-- 父组件向子组件传递方法 --&gt;\t&lt;com2 @func=&quot;show&quot;&gt;&lt;/com2&gt;&lt;/div&gt;&lt;template id=&quot;tmp1&quot;&gt;\t&lt;div&gt; &lt;h3&gt;这是一个子组件&lt;/h3&gt; &lt;button type=&quot;button&quot; @click=&quot;myclick&quot;&gt;这是一个子组件按钮，点击触发父组件传递来的func方法&lt;/button&gt;\t&lt;/div&gt;&lt;/template&gt; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152var com2 = Vue.component(&#x27;com2&#x27;,&#123;\ttemplate:&#x27;#tmp1&#x27;,\tdata()&#123; return&#123; msg:&#x27;儿子：我有钱了，给爸爸200块钱拿去买烟&#x27; // sonmsg:&#123;name:&#x27;我&#x27;,agee:21&#125; &#125;\t&#125;,\tmethods:&#123; myclick:function()&#123; // 当点击子组件，触发拿到父组件传递过来的func方法 this.$emit(&#x27;func&#x27;,123,456,this.msg) &#125;\t&#125;&#125;)var vm = new Vue(&#123;\tel:&#x27;#app&#x27;,\tdata:&#123; msg: &#x27;爸爸这里有100块钱，儿子你要不要？&#x27;, datamsgForSon: null\t&#125;,\tcomponents:&#123; // 结论：经过演示发现子组件默认无法访问到父组件data数据 com1:&#123; data()&#123; //注意子组件的data数据，并不是通过父组件传递过来的，而是子组件私有的，比如Ajax请求回来的数据，都可以放在data身上 // data 上的数据都是可读可写的 return&#123; title:&#x27;123&#x27;, content:&#x27;小名&#x27; &#125; &#125;, // 注意： 组件种所有props数据都是通过父组件传递给子组件的 template:&#x27;&lt;h1&gt;这是子组件&#123;&#123;parentmsg&#125;&#125;&lt;/h1&gt;&#x27;, // props中的数据都是只读的 props:[&#x27;parentmsg&#x27;] //把父组件传递过来的parentmsg属性，在props定义才能使用这个数据 &#125;\t&#125;,\tmethods:&#123; // onChange:function()&#123; // this.parentmsg = &quot;被修改了！&quot; // &#125; show:function(data,data2,data3)&#123; console.log(&#x27;这是调用了子组件show方法&#x27;+data+data2+data3) // 拿到子组件data数据为父组件data数据赋值 this.datamsgForSon = data3 &#125;\t&#125;&#125;) 演示地址父-&gt;子 方法和数据，然后把子组件数据绑定到父data中去 组件案例：【评论列表】123&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0,user-scalable=no&quot;&gt;&lt;script src=&quot;https://cdn.staticfile.org/vue/2.2.2/vue.min.js&quot;&gt;&lt;/script&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap.min.css&quot;&gt; 1234567891011121314151617.subtitle&#123;\twidth: 300px;\theight: auto;&#125;.b&#123;\tdisplay: block;\twidth: 6px;\theight: auto;\tbackground: skyblue;&#125;.subtitle h3&#123;\twidth: 300px;\tmargin: 0;\tpadding:0;\tposition: relative;\tleft: 18px;&#125; 123456789101112131415161718192021222324252627282930313233343536&lt;div id=&quot;app&quot;&gt;\t&lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;jumbotron&quot;&gt; &lt;cmt-box @func=&quot;loadComments&quot;&gt;&lt;/cmt-box&gt; &lt;/div&gt; &lt;div class=&quot;subtitle&quot;&gt; &lt;span class=&quot;b&quot;&gt;&lt;h3&gt;评论区&lt;/h3&gt;&lt;/span&gt; &lt;/div&gt;&lt;hr&gt; &lt;div class=&quot;media&quot;&gt; &lt;li v-for=&quot;item in list&quot; :key=&quot;item.id&quot;&gt; &lt;div class=&quot;media-left media-top&quot;&gt; &lt;img src=&quot;https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=3342714247,4238880061&amp;fm=15&amp;gp=0.jpg&quot; class=&quot;media-object&quot; style=&quot;width: 60px&quot;&gt; &lt;/div&gt; &lt;div class=&quot;media-body&quot;&gt; &lt;h4 class=&quot;media-heading&quot;&gt;评论人：&#123;&#123;item.user&#125;&#125;&amp;nbsp;&lt;span style=&quot;font-size: 12px;color: #999&quot;&gt;&#123;&#123;item.id | dateFormat&#125;&#125;&lt;/span&gt;&lt;/h4&gt; &lt;p&gt;&#123;&#123;item.content&#125;&#125;&lt;/p&gt; &lt;/div&gt; &lt;/li&gt; &lt;/div&gt;\t&lt;/div&gt;&lt;/div&gt;&lt;template id=&quot;tmp1&quot;&gt;\t&lt;div&gt; &lt;div class=&quot;form-group&quot;&gt; &lt;label&gt;评论人：&lt;/label&gt; &lt;input type=&quot;text&quot; v-model=&quot;user&quot; class=&quot;form-control&quot; v-focus&gt; &lt;/div&gt; &lt;div class=&quot;form-group&quot;&gt; &lt;label&gt;评论内容：&lt;/label&gt; &lt;textarea class=&quot;form-control&quot; v-model=&quot;content&quot; @keyup.enter=&quot;postComment&quot;&gt;&lt;/textarea&gt; &lt;/div&gt; &lt;div class=&quot;form-group&quot;&gt; &lt;input type=&quot;button&quot; class=&quot;btn btn-primary&quot; value=&quot;发表评论&quot; @click=&quot;postComment&quot;&gt; &lt;/div&gt;\t&lt;/div&gt;&lt;/template&gt; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596var commentBox =&#123;\ttemplate:&#x27;#tmp1&#x27;,\tdata()&#123; return&#123; user:&#x27;&#x27;, content:&#x27;&#x27; &#125;\t&#125;,\tmethods:&#123; // 发表评论 // 分析：发表评论的业务逻辑 // 1.评论数据放在哪 存localStorage中 localStorage.getItem() // 2.先组织一个最新的评论数据对象 // 3.想办法，把第二步得到评论对象保存到localStorage [只支持存放字符串数据]，调用json.stringify // 在保存最新的评论数据之前，要先从localStorage获取到之前的数据&#123;string&#125;，转换成一个数组对象，然后把最新评论Push到整个数组 // 如果获取到的localStorage中的评论字符串为空或不存在，则可以返回一个&#x27;[]&#x27;,让JSON.parse转换 // 4.把最新的评论列表数组，再次调用JSON.stringify 转为数组字符串，然后调用 localStorage.setItem()存入文件 postComment:function()&#123; var comment =&#123;id: Date.now(),user: this.user,content: this.content&#125; // 从localStorage 中获取所有的评论 var list = JSON.parse(localStorage.getItem(&#x27;cmts&#x27;) || &#x27;[]&#x27;) list.unshift(comment) console.log(list) // 重新保存最新的评论数据 localStorage.setItem(&#x27;cmts&#x27;,JSON.stringify(list)) this.$emit(&#x27;func&#x27;) this.user = this.content =&#x27;&#x27; &#125;\t&#125; &#125;var vm = new Vue(&#123;\tel:&#x27;#app&#x27;,\tdata:&#123; list:[ &#123;id:Date.now(),user:&#x27;李白&#x27;,content:&#x27;大河之水天上来，奔流到海不复回&#x27;&#125; ]\t&#125;,\tmethods:&#123; loadComments:function()&#123; // 从本地加载评论列表 var list = JSON.parse(localStorage.getItem(&#x27;cmts&#x27;) || &#x27;[]&#x27;) this.list = list &#125;\t&#125;,\tfilters:&#123; dateFormat:function(dataStr,pattern)&#123; // 根据给定的字符串给出特定的时间 var dt = new Date(dataStr) // yyyy-mm-dd var y = dt.getFullYear() // 月|日|十|分|秒 存在 单 位数，需要用es6字符串组合补位 .padStart(length,value) var m = (dt.getMonth()+1).toString().padStart(2,&#x27;0&#x27;) var d = (dt.getDate()).toString().padStart(2,&#x27;0&#x27;) // return y+&#x27;-&#x27;+m+&#x27;-&#x27;+&#x27;d&#x27; if (pattern &amp;&amp; pattern.toLowerCase()===&#x27;yyyy-mm-dd&#x27;) &#123; return `$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125;` &#125; else&#123; var hh = (dt.getHours()).toString().padStart(2,&#x27;0&#x27;) var mm = (dt.getMinutes()).toString().padStart(2,&#x27;0&#x27;) var ss = (dt.getSeconds()).toString().padStart(2,&#x27;0&#x27;) return `$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125; $&#123;hh&#125;:$&#123;mm&#125;:$&#123;ss&#125;` &#125; &#125;\t&#125;,\tcomponents:&#123; &#x27;cmt-box&#x27;:commentBox\t&#125;,\t// 实现添加焦点聚集\tdirectives:&#123; &#x27;focus&#x27;:&#123; bind:function(el)&#123; //每当指令绑定到指令上会立即执行这个函数，只执行一次 // 注意： 在每个函数中，第一个参数永远是el ，表示指令绑定的元素，是一个原生js对象 // 在元素 刚绑定指令时.还没有插入到DOM中去.这时候调用没作用 // el.focus() &#125;, inserted:function(el)&#123; // 表示元素插入到DOM中时候执行这个函数，只执行一次 el.focus() &#125;, update: function()&#123; // 表示元素更新到DOM中时候执行这个函数，可执行多次 &#125; &#125;\t&#125;,\tcreated()&#123; this.loadComments()\t&#125;&#125;) 演示链接演示地址 使用ref获取DOM元素和组件引用123456&lt;div id=&quot;app&quot;&gt;\t&lt;input type=&quot;button&quot; name=&quot;&quot; value=&quot;获取元素&quot; @click=&quot;getElement&quot;&gt;\t&lt;h1 id=&quot;myh3&quot; ref=&quot;myh3&quot;&gt;我是需要调用的DOM元素&lt;/h1&gt;\t&lt;hr&gt;\t&lt;login ref=&quot;mylogin&quot;&gt;&lt;/login&gt;&lt;/div&gt; 123456789101112131415161718192021222324252627282930var login = &#123;\ttemplate:&#x27;&lt;h1&gt;登录组件&lt;/h1&gt;&#x27;,\tdata()&#123; return&#123; msg:&#x27;son msg&#x27; &#125;\t&#125;,\tmethods:&#123; show:function()&#123; console.log(&#x27;调用了子组件的show 方法&#x27;) &#125;\t&#125;&#125;var vm = new Vue(&#123;\tel:&#x27;#app&#x27;,\tdata:&#123; &#125;,\tmethods:&#123; getElement:function()&#123; // console.log(document.getElementById(&#x27;myh3&#x27;).innerText) console.log(this.$refs.myh3.innerText) console.log(this.$refs.mylogin.msg) this.$refs.mylogin.show() &#125;\t&#125;,\tcomponents:&#123; login\t&#125;&#125;) 演示ref获取dom+ref获取组件方法，data","tags":["Vue组件"],"categories":["Vue2.0"]},{"title":"vue动画","path":"/posts/88bda290.html","content":"共用 v-1234567891011121314/*自定义两组样式控制transition 内部元素实现过渡动画 *//* v-enter 进入前，元素起始状态 [时间点]*/.v-enter,/* v-leave-to 离开之后时间点*/.v-leave-to&#123;\topacity: 0;\ttransform: translate(200px);&#125;/* v-enter-active [入场动画时间段]*//* v-leave-active [离场动画时间段]*/.v-enter-active,.v-leave-active&#123;\ttransition: all 0.4s ease;&#125; 1234567891011121314&lt;div id=&quot;app&quot;&gt;\t&lt;p&gt;需求: 使用过度类名实现动画点击h3显示，再点击隐藏&lt;/p&gt;\t&lt;input type=&quot;button&quot; name=&quot;&quot; value=&quot;toggle&quot; @click=&quot;flag=!flag&quot;&gt;\t&lt;!-- 使用transtion 元素把需要的被动画控制的元素 --&gt;\t&lt;transition&gt; &lt;h3 v-if=&quot;flag&quot;&gt;这是一个h3&lt;/h3&gt;\t&lt;/transition&gt;\t&lt;hr&gt;\t&lt;input type=&quot;button&quot; name=&quot;&quot; value=&quot;toggle2&quot; @click=&quot;flag2=!flag2&quot;&gt;\t&lt;!-- 使用transtion 元素把需要的被动画控制的元素 --&gt;\t&lt;transition&gt; &lt;h6 v-if=&quot;flag2&quot;&gt;这是一个h6&lt;/h6&gt;\t&lt;/transition&gt; &lt;/div&gt; 12345678var vm = new Vue(&#123;\tel:&#x27;#app&#x27;,\tdata:&#123; flag: false, flag2: false\t&#125;,\tmethods:&#123;&#125;,&#125;) 演示 自定义v-前缀 注意：添加两组transition类区别有无name属性 123456789101112131415161718192021222324252627/* v-enter 进入前，元素起始状态 [时间点]*/.v-enter,/* v-leave-to 离开之后时间点*/.v-leave-to&#123;\topacity: 0;\ttransform: translateX(200px);&#125;/* v-enter-active [入场动画时间段]*//* v-leave-active [离场动画时间段]*/.v-enter-active,.v-leave-active&#123;\ttransition: all 0.4s ease;&#125;/* v-enter 进入前，元素起始状态 [时间点]*/.my-enter,/* v-leave-to 离开之后时间点*/.my-leave-to&#123;\topacity: 0;\ttransform: translateY(200px);&#125;/* v-enter-active [入场动画时间段]*//* v-leave-active [离场动画时间段]*/.my-enter-active,.my-leave-active&#123;\ttransition: all 0.4s ease;&#125; 12345678910111213141516&lt;div id=&quot;app&quot;&gt;\t&lt;p&gt;需求: 使用过度类名实现动画实现 上面按钮从右向左 下面从下到上&lt;/p&gt;\t&lt;input type=&quot;button&quot; name=&quot;&quot; value=&quot;toggle&quot; @click=&quot;flag=!flag&quot;&gt;\t&lt;!-- 使用transtion 元素把需要的被动画控制的元素 --&gt;\t&lt;transition&gt; &lt;h3 v-if=&quot;flag&quot;&gt;这是一个h3&lt;/h3&gt;\t&lt;/transition&gt;\t&lt;hr&gt;\t&lt;input type=&quot;button&quot; name=&quot;&quot; value=&quot;toggle2&quot; @click=&quot;flag2=!flag2&quot;&gt;\t&lt;!-- 使用transtion 元素把需要的被动画控制的元素 --&gt;\t&lt;!-- 注意：name=&quot;my&quot; --&gt;\t&lt;transition name=&quot;my&quot;&gt; &lt;h6 v-if=&quot;flag2&quot;&gt;这是一个h6&lt;/h6&gt;\t&lt;/transition&gt;\t&lt;/div&gt; 12345678var vm = new Vue(&#123;\tel:&#x27;#app&#x27;,\tdata:&#123; flag: false, flag2: false\t&#125;,\tmethods:&#123;&#125;,&#125;) 演示 第三方动态库实现动画 如：https://animate.style/ 源码1&lt;link href=&quot;https://cdn.jsdelivr.net/npm/animate.css@3.5.1&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt; 1234567891011121314&lt;div id=&quot;app&quot;&gt;\t&lt;div id=&quot;example-3&quot;&gt; &lt;button @click=&quot;flag = !flag&quot;&gt; toggle &lt;/button&gt; &lt;transition name=&quot;custom-classes-transition&quot; enter-active-class=&quot;animated tada&quot; leave-active-class=&quot;animated bounceOutRight&quot; &gt; &lt;p v-if=&quot;flag&quot;&gt;Animate.css&lt;/p&gt; &lt;/transition&gt;\t&lt;/div&gt;&lt;/div&gt; 1234567var vm = new Vue(&#123;\tel:&#x27;#example-3&#x27;,\tdata:&#123; flag: false\t&#125;,\tmethods:&#123;&#125;,&#125;) 演示 半场动画（例如加入购物车）【借助于 函数】12345678910111213&lt;transition v-on:before-enter=&quot;beforeEnter&quot; v-on:enter=&quot;enter&quot; v-on:after-enter=&quot;afterEnter&quot; v-on:enter-cancelled=&quot;enterCancelled&quot; v-on:before-leave=&quot;beforeLeave&quot; v-on:leave=&quot;leave&quot; v-on:after-leave=&quot;afterLeave&quot; v-on:leave-cancelled=&quot;leaveCancelled&quot;&gt; &lt;!-- ... --&gt;&lt;/transition&gt; 演示钩子小球动画 代码12345678910111213body&#123;\tcolor: #fff;\tbackground-color: #000&#125;.ball&#123;\twidth: 15px;\theight: 15px;\tbackground-color: red;\tborder-radius: 50%&#125;input[type=&quot;button&quot;]:hover&#123;\tcursor: pointer;&#125; 123456789101112&lt;div id=&quot;app&quot;&gt;\t&lt;input type=&quot;button&quot; value=&quot;快到碗里来&quot; name=&quot;&quot; @click=&quot;flag=!flag&quot;&gt;\t&lt;!-- 使用transtion包裹元素 --&gt;\t&lt;transition @before-enter=&quot;beforeEnter&quot; @enter=&quot;enter&quot; @after-enter=&quot;afterEnter&quot;&gt; &lt;div class=&quot;ball&quot; v-show=&quot;flag&quot;&gt;&lt;/div&gt;\t&lt;/transition&gt;\t&lt;span style=&quot;position: absolute;left: 120px;top: 500px&quot;&gt;“形象”的碗&lt;/span&gt;\t&lt;/div&gt; 12345678910111213141516171819202122232425262728293031323334353637383940var vm = new Vue(&#123;\tel:&#x27;#app&#x27;,\tdata:&#123; flag: false\t&#125;,\tmethods:&#123; // el:表示要执行动画的那个元素是个原生的js DOM对象 // el是通过 document.getElmentById(&#x27;&#x27;) 获取的DOM对象 beforeEnter:function (el) &#123; // 表示动画入场之前，此时动画尚未开始，可以在beforeEnter 中设置动画开始之前的其实样式 // 设置小球起始位置 el.style.transform = &quot;translate(0,0)&quot; &#125;, enter: function (el,done)&#123; // 这句话没有实际作用，如果不写没有实际效果 // 可以el.offsetWidth会强制浏览器刷新 el.offsetWidth // 表示动画开始之后的样式，这里可以设置小球完成动画的结束状态 el.style.transform = &quot;translate(150px,450px)&quot; el.style.transition = &quot;all 1s ease&quot; // 这里的回调done函数 ，其实就是 afterEnter 这个函数，也就是说done是afterEnter的引用 done() &#125;, afterEnter: function (el)&#123; // 动画完成之后 // 这句话 ：第一个功能：控制小球的显示与隐藏 // 第二个功能： 直接跳过后半场动画，让flag 变成false // 当第二次点击， flag:false -&gt; true this.flag = !this.flag // el.style.opacity=0 // Vue 把一个完整的动画使用钩子函数拆分成了两部分 // 我们使用 flag 标识符表示动画的切换 // flag = flase -&gt; true -&gt;false &#125;\t&#125;,&#125;) transition-group 列表动画源码123456789101112131415161718192021222324252627282930313233ul&#123;\tpadding: 0&#125;li&#123;\twidth: 100%;\tlist-style-type: none;\tborder: 1px dashed #999;\tpadding: 8px;\tline-height: 35px;&#125;li:hover&#123;\tbackground-color: pink;\ttransition: all 0.4s ease&#125;.v-enter,.v-leave-to&#123;\topacity: 0;\ttransform: translateY(80px);&#125;.v-enter-active,.v-leave-active&#123;\ttransition: all 0.8s ease&#125;/*\t下面的.move 和 .v-leave-active 配合使用，能够实现列表后续的元素，渐渐的飘上来的效果*/.v-move&#123;\ttransition: all 0.8s ease&#125;.v-leave-active&#123;\tposition: absolute;&#125; 12345678910111213141516171819202122&lt;div id=&quot;app&quot;&gt;\t&lt;div&gt; &lt;label&gt; ID: &lt;input type=&quot;text&quot; name=&quot;&quot; v-model=&quot;id&quot;&gt; &lt;/label&gt; &lt;label&gt; Name: &lt;input type=&quot;text&quot; name=&quot;&quot; v-model=&quot;name&quot;&gt; &lt;/label&gt; &lt;input type=&quot;button&quot; name=&quot;&quot; value=&quot;添加&quot; @click=&quot;add&quot;&gt;\t&lt;/div&gt; &lt;!-- 在实现列表过度的时候，如果需要过度元素，是通过v-for 循环渲染出来的，需要用transition包裹 所以使用transitionGroup --&gt; &lt;!-- 如果要给 v-for 循环创建元素动画，必须为每一个元素设置:key --&gt; &lt;p&gt;奸臣一表：【点击删除】&lt;/p&gt; &lt;transition-group appear tag=&quot;ul&quot;&gt; &lt;li v-for=&quot;item in list&quot; :key=&quot;item.id&quot; @click=&quot;del(item.id)&quot;&gt; &#123;&#123;item.id&#125;&#125; ---- &#123;&#123;item.name&#125;&#125; &lt;/li&gt; &lt;/transition-group&gt; &lt;/div&gt; 12345678910111213141516171819202122232425262728var vm = new Vue(&#123;\tel:&#x27;#app&#x27;,\tdata:&#123; id: &#x27;&#x27;, name: &#x27;&#x27;, list:[ &#123;id:1,name:&#x27;赵高&#x27;&#125;, &#123;id:2,name:&#x27;魏忠贤&#x27;&#125;, &#123;id:3,name:&#x27;脑补不出来&#x27;&#125;, &#123;id:4,name:&#x27;你们来吧&#x27;&#125; ]\t&#125;,\tmethods:&#123; add: function()&#123; this.list.push(&#123;id:this.id,name:this.name&#125;) this.id = this.name =&#x27;&#x27; &#125;, del:function(id)&#123; var index = this.list.findIndex(item=&gt;&#123; if (item.id == id) &#123; //在数组的some方法中,如果return true,就会立刻终止这个数组循环 return true &#125; &#125;) this.list.splice(index,1) &#125;\t&#125;,&#125;) 演示 注意：我们发现 transition-group 渲染成一个span标签，span标签内包含v-for 遍历的list数组，不符合w3c的行内元素不能包裹块状元素的原则，所以需要给transition-group 加一个tag属性渲染ul,若不指定默认渲染为span。","tags":["Vue动画"],"categories":["Vue2.0"]},{"title":"Vue品牌列表","path":"/posts/ed597b90.html","content":"演示 利用Vue的各个过滤器生命周期钩子函数、组件、遍历、Table表单实现增、删、查表单功能 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;\t&lt;meta charset=&quot;utf-8&quot;&gt;\t&lt;title&gt;品牌列表(增删改过滤)&lt;/title&gt;\t&lt;meta http-equiv=&quot;Content-Security-Policy&quot; content=&quot;upgrade-insecure-requests&quot;&gt;\t&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0,user-scalable=no&quot;&gt;\t&lt;link href=&quot;https://cdn.bootcss.com/twitter-bootstrap/3.3.7/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt; &lt;link href=&quot;https://cdn.bootcss.com/twitter-bootstrap/3.3.7/css/bootstrap-theme.min.css&quot; rel=&quot;stylesheet&quot;&gt; &lt;script src=&quot;http://cdn.bootcss.com/jquery/1.11.1/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;http://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;\t&lt;script src=&quot;https://cdn.staticfile.org/vue/2.2.2/vue.min.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;\t&lt;div id=&quot;app&quot;&gt; &lt;div class=&quot;panel panel-primary&quot;&gt; &lt;div class=&quot;panel-heading&quot;&gt; &lt;h3 class=&quot;panel-title&quot;&gt;添加品牌&lt;/h3&gt; &lt;/div&gt; &lt;div class=&quot;panel-body form-inline&quot;&gt; &lt;label&gt;ID:&lt;input type=&quot;text&quot; name=&quot;&quot; class=&quot;form-control&quot; v-model=&quot;id&quot;&gt;&lt;/label&gt; &lt;label&gt;Name:&lt;input type=&quot;text&quot; name=&quot;&quot; class=&quot;form-control&quot; v-model=&quot;name&quot; @keyup.enter=&quot;add&quot;&gt;&lt;/label&gt; &lt;!-- 在vue中使用事件绑定机制处理函数的时候 加()可以传参 --&gt; &lt;input type=&quot;button&quot; name=&quot;&quot; value=&quot;添加&quot; class=&quot;btn btn-primary&quot; @click=&quot;add&quot;&gt; &lt;!-- 注意： Vue中所有的指令，在调用的时候都以 v- 开头 --&gt; &lt;label v-color=&quot;&#x27;pink&#x27;&quot; v-fontweight=&quot;600&quot; v-fontsize=&quot;&#x27;20&#x27;&quot;&gt;输入搜索关键字:&lt;input type=&quot;text&quot; name=&quot;&quot; class=&quot;form-control&quot; v-model=&quot;keywords&quot; v-focus&gt;&lt;/label&gt; &lt;/div&gt; &lt;/div&gt; &lt;table class=&quot;table table-bordered table-hover table-striped&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;ID&lt;/th&gt; &lt;th&gt;名称&lt;/th&gt; &lt;th&gt;操作时间&lt;/th&gt; &lt;th&gt;操作&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;!-- 之前 v-for 中的数据能够直接在data list 中直接渲染过来 --&gt; &lt;!-- 现在，定义一个search方法，把关键字传参形式传递search方法 --&gt; &lt;!-- 把搜索key返回重新定义list 的data数组 --&gt; &lt;tr v-for=&quot;item in search(keywords)&quot; :key=&quot;item.id&quot;&gt; &lt;td&gt;&#123;&#123;item.id&#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123;item.ctime | dateFormat&#125;&#125;&lt;/td&gt; &lt;td&gt; &lt;!-- 阻止默认行为,不刷新 .prevent --&gt; &lt;a href=&quot;&quot; @click.prevent=&quot;del(item.id)&quot;&gt;删除&lt;/a&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;\t&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158// 全局过滤器// pattern 传值 显示具体时间// 否则 显示 时间// Vue.filter(&#x27;dateFormat&#x27;,function(dataStr,pattern)&#123;// // 根据给定的字符串给出特定的时间// var dt = new Date(dataStr)// // yyyy-mm-dd// var y = dt.getFullYear()// var m = dt.getMonth()+1// var d = dt.getDate()// // return y+&#x27;-&#x27;+m+&#x27;-&#x27;+&#x27;d&#x27;// if (pattern &amp;&amp; pattern.toLowerCase()===&#x27;yyyy-mm-dd&#x27;) &#123;// return `$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125;`// &#125;// else&#123;// var hh =dt.getHours()// var mm = dt.getMinutes()// var ss = dt.getSeconds()// return `$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125; $&#123;hh&#125;:$&#123;mm&#125;:$&#123;ss&#125;`// &#125;// &#125;)// 2.x 版本自定义全局键盘修饰符Vue.config.keyCodes.f2 =113 // 使用 Vue.directive() 定义全局指令// 其中： 参数1： 指令名称 注意在定义时不需要加 v- 前缀 ，调用时必须加// 参数2： 是一个对象，在这个对象身上，有一些指令相关的函数，这些函数可以在待定阶段函数操作Vue.directive(&#x27;focus&#x27;,&#123;\tbind:function(el)&#123; //每当指令绑定到指令上会立即执行这个函数，只执行一次 // 注意： 在每个函数中，第一个参数永远是el ，表示指令绑定的元素，是一个原生js对象 // 在元素 刚绑定指令时.还没有插入到DOM中去.这时候调用没作用 // el.focus()\t&#125;,\tinserted:function(el)&#123; // 表示元素插入到DOM中时候执行这个函数，只执行一次 el.focus()\t&#125;,\tupdate: function()&#123; // 表示元素更新到DOM中时候执行这个函数，可执行多次\t&#125;&#125;)Vue.directive(&#x27;color&#x27;,&#123;\tbind:function(el,binding)&#123; el.style.color=binding.value\t&#125;&#125;)var vm = new Vue(&#123;\tel:&#x27;#app&#x27;,\tdata:&#123; id: &#x27;&#x27;, name: &#x27;&#x27;, keywords: &#x27;&#x27;, list:[ &#123;id : 1,name: &#x27;奔驰&#x27;,ctime: new Date()&#125;, &#123;id : 2,name: &#x27;牧马人&#x27;,ctime: new Date()&#125;, ]\t&#125;,\tmethods:&#123; add: function()&#123; //分析 // 1.获取 id 和 name =&gt;data // 2.组织一个对象 // 3.添加对象到list // 4.在vue中已经实现了数据的双向绑定,每当我们修改了data的数据,vue默认监听数据变动,把最新数据应用到页面上 // 5. 我们更多的是在进行vm 中 model数据的操作,同时在model操作中,指定的业务逻辑操作 var car = &#123;id : this.id,name: this.name,ctime: new Date()&#125; this.list.push(car) this.name = this.id = null &#125;, del: function(id)&#123; // 根据id删除数据 // 分析: // 1. 如何根据id 找到要删除对象的索引 // 2. 找到索引直接调用 数组的splice 方法 // this.list.some((item,i)=&gt;&#123; // if (item.id == id) &#123; // //在数组的some方法中,如果return true,就会立刻终止这个数组循环 // this.list.splice(i,1) // return true // &#125; // &#125;) // 创建回调 var index = this.list.findIndex(item=&gt;&#123; if (item.id == id) &#123; //在数组的some方法中,如果return true,就会立刻终止这个数组循环 return true &#125; &#125;) this.list.splice(index,1) &#125;, search: function(keywords)&#123; // var newList = [] // this.list.forEach(item =&gt;&#123; // if (item.name.indexOf(keywords)!=-1) &#123; // newList.push(item) // &#125; // &#125;) // return newList // 注意： forEach some filter findIndex 这些都属于数组的新方法 // 都会对数组每一项进行遍历执行相关的操作 return this.list.filter(item =&gt; &#123; // 注意： 在es6中，为字符串提供一个新方法，叫做 String prototype.includes(&#x27;要包含&#x27;) if (item.name.includes(keywords))&#123; return item &#125; &#125;) &#125;\t&#125;,\tfilters:&#123; // 创建私有过滤器 条件：名称+处理函数 // 过滤器调用采取就近原则，若私有跟全局一致，则优先调用私有过滤器 dateFormat: function(dataStr,pattern)&#123; // 根据给定的字符串给出特定的时间 var dt = new Date(dataStr) // yyyy-mm-dd var y = dt.getFullYear() // 月|日|十|分|秒 存在 单 位数，需要用es6字符串组合补位 .padStart(length,value) var m = (dt.getMonth()+1).toString().padStart(2,&#x27;0&#x27;) var d = (dt.getDate()).toString().padStart(2,&#x27;0&#x27;) // return y+&#x27;-&#x27;+m+&#x27;-&#x27;+&#x27;d&#x27; if (pattern &amp;&amp; pattern.toLowerCase()===&#x27;yyyy-mm-dd&#x27;) &#123; return `$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125;` &#125; else&#123; var hh = (dt.getHours()).toString().padStart(2,&#x27;0&#x27;) var mm = (dt.getMinutes()).toString().padStart(2,&#x27;0&#x27;) var ss = (dt.getSeconds()).toString().padStart(2,&#x27;0&#x27;) return `$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125; $&#123;hh&#125;:$&#123;mm&#125;:$&#123;ss&#125;` &#125; &#125;\t&#125;,\tdirectives:&#123; //自定义私有指令 &#x27;fontweight&#x27;:&#123; // 设置字体粗细 bind: function(el,binding)&#123; el.style.fontWeight=binding.value &#125; &#125;, &#x27;fontsize&#x27;:function(el,binding)&#123; // 这主意这个函数的你沟通与把代码写到bind跟update中去 el.style.fontSize=parseInt(binding.value)+&#x27;px&#x27; &#125;\t&#125;&#125;)","tags":["Vue基于Table表单增、删、查项目"],"categories":["前端"]},{"title":"Vue-resourse 实现get,post,jsonp请求","path":"/posts/6b3a2798.html","content":"Vue-resourse CDN引用地址：https://cdn.jsdelivr.net/npm/vue-resource@1.5.1 get请求地址：http://jsonplaceholder.typicode.com/users post请求地址：http://jsonplaceholder.typicode.com/users jsonp请求地址：http://jsonplaceholder.typicode.com/users 代码展示123456789101112131415161718192021222324252627282930313233343536373839&lt;div id=&quot;app&quot;&gt;\t&lt;input type=&quot;button&quot; name=&quot;&quot; value=&quot;get请求&quot; @click=&quot;getInfo&quot;&gt;\t&lt;input type=&quot;button&quot; name=&quot;&quot; value=&quot;post请求&quot; @click=&quot;postInfo&quot;&gt;\t&lt;input type=&quot;button&quot; name=&quot;&quot; value=&quot;jsonp请求&quot; @click=&quot;jsonpInfo&quot;&gt;&lt;/div&gt;&lt;script src=&quot;https://cdn.staticfile.org/vue/2.2.2/vue.min.js&quot;&gt;&lt;/script&gt;&lt;!-- vue-resource依赖于vue --&gt;&lt;!-- this.$http.get / post /jsonp --&gt;&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue-resource@1.5.1&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt;\tvar vm = new Vue(&#123; el:&#x27;#app&#x27;, data:&#123; &#125;, methods:&#123; getInfo:function () &#123; // 当发起get请求之后通过 .then设置成功的回调函数 this.$http.get(&#x27;http://jsonplaceholder.typicode.com/users&#x27;).then(result=&gt;&#123; // sucess callback console.log(result.body) &#125;,result=&gt;&#123; //error callback &#125;) &#125;, postInfo:function()&#123; this.$http.post(&#x27;http://jsonplaceholder.typicode.com/users&#x27;,&#123;&#125;,&#123; emulateJSON : true &#125;).then(result=&gt;&#123; console.log(result.body) &#125;) &#125;, jsonpInfo:function()&#123; // 发起jsonp请求 this.$http.jsonp(&#x27;http://jsonplaceholder.typicode.com/users&#x27;).then(function(result)&#123; console.log(result.body) &#125;) &#125; &#125;,\t&#125;)&lt;/script&gt; 演示：点击演示 get1this.http.get(&#x27;/someUrl&#x27;, [config]).then(successCallback, errorCallback); post1this.$http.post(&#x27;/someUrl&#x27;, [body], [config]).then(successCallback, errorCallback); 注意发起post请求格式：application&#x2F;x-wwww-form,-urlencodeed手动发起的post请求，默认没有表单格式，有的服务器处理不了这里需要添加config 属性 emulateHTTP 详见：https://github.com/pagekit/vue-resource/blob/develop/docs/http.md jsonp1jsonp(&#x27;url&#x27;, [config]).then(successCallback, errorCallback);","tags":["Vue-resourse"],"categories":["Vue2.0"]},{"title":"Vue生命周期","path":"/posts/83f13096.html","content":"Vue实例的生命周期概念：从Vue实例的创建、运行、到销毁期间，总是伴随着各种各样的时间，这类事件统称为生命周期 生命周期钩子 = 生命周期函数 = 生命周期事件 生命周期函数分： 创建 运行 销毁 创建123456789101112131415161718192021222324252627282930313233343536373839&lt;div id=&quot;app&quot;&gt;\t&lt;h3 id=&quot;h&quot;&gt;&#123;&#123; msg &#125;&#125;&lt;/h3&gt;&lt;/div&gt;&lt;script src=&quot;https://cdn.staticfile.org/vue/2.2.2/vue.min.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt;\tvar vm = new Vue(&#123; el:&#x27;#app&#x27;, data:&#123; msg: &#x27;ok&#x27; &#125;, methods:&#123; show: function()&#123; console.log(&#x27;show调用&#x27;) &#125; &#125;, beforeCreate()&#123; //这里时我们遇到的第1个生命周期函数，表示实例完全被创建出来之前，会执行它 // this.show() // 注意： 在 beforeCreate() 生命周期函数执行的时候，data,methods 都没有初始化 &#125;, created()&#123; // 这是遇到的第2个生命周期函数 this.show() // 在 created 中，data和methods都已经被初始画 // 如果我们需要调用methods方法就只能在这里写 &#125;, beforeMount()&#123; // 这是遇到的第3个生命周期函数，表示模板已经在内存中编辑完成,但尚未把模板渲染到页面 console.log(document.getElementById(&#x27;h&#x27;).innerText) // 在beforeMount执行的时候，页面元素还没有真正替换过来，只是模板字符串 &#125;, mounted()&#123; //这是遇到的第4个生命周期函数，表示内存中的模板已经真是的挂载到页面，用户可以看到渲染的页面了 console.log(document.getElementById(&#x27;h&#x27;).innerText) // 注意： mounted 是实例创建期间最后一个生命周期函数，当执行完mounted 就表示实例已被完全创建，此时如果没有其他操作的话，这个实例就静静的躺在我们的内存中一动不动 &#125;\t&#125;)&lt;/script&gt; 如果要通过某些插件操作页面上的DOM节点，最早要在 mounted 中执行只要执行完 mounted ，就表示整个Vue实例已经初始化完毕了。此时，组件已经脱离了创建阶段，进入到运行阶段 运行123456789101112131415161718192021222324252627282930&lt;div id=&quot;app&quot;&gt;\t&lt;h3 id=&quot;h&quot;&gt;&#123;&#123; msg &#125;&#125;&lt;/h3&gt;\t&lt;input type=&quot;button&quot; name=&quot;&quot; value=&quot;修改msg&quot; @click=&quot;msg=&#x27;no&#x27;&quot;&gt;&lt;/div&gt;&lt;script type=&quot;text/javascript&quot;&gt;\tvar vm = new Vue(&#123; el:&#x27;#app&#x27;, data:&#123; msg: &#x27;ok&#x27; &#125;, methods:&#123; show: function()&#123; console.log(&#x27;show调用&#x27;) &#125; &#125; // 接下来是运行中的两个事件 beforeUpdate()&#123; // 这时候表示数据肯定被更新了 console.log(&#x27;界面上元素的内容&#x27;+document.getElementById(&#x27;h&#x27;).innerText) console.log(&#x27;data中的msg:&#x27;+this.msg) // 当执行时，页面内容还是旧的，data是最新的 &#125;, updated()&#123; console.log(&#x27;界面上元素的内容&#x27;+document.getElementById(&#x27;h&#x27;).innerText) console.log(&#x27;data中的msg:&#x27;+this.msg) // updated执行完 数据和页面元素都是最新的 &#125;\t&#125;)&lt;/script&gt; 销毁 beforeDestory()：当执行此函数时，Vue实例已经从运行阶段进入销毁阶段可执行此函数时，实例身上所有data、methods 以及 过滤器、指令等等都处于可用状态，此时还没有真正执行销毁的过程。 destroyed(): 当执行此函数时，组件已被完全销毁，此时，组件中所有数据、方法、指令、过滤器都销毁了 演示：点击这里查看页面","tags":["Vue生命周期"],"categories":["Vue2.0"]},{"title":"Vue指令","path":"/posts/669b9394.html","content":"v-cloak: 能够解决 插值表达式闪烁的问题（只替代占位符）1234567891011121314151617181920&lt;style type=&quot;text/css&quot;&gt;\t[v-cloak]&#123; display: none;\t&#125;&lt;/style&gt;&lt;div id=&quot;app&quot;&gt; &lt;p v-cloak&gt;&#123;&#123;msg&#125;&#125;&lt;/p&gt;\t&lt;h4 v-text=&quot;msg&quot;&gt;&lt;/h4&gt;\t&lt;!-- 默认 v-text 是没有闪烁问题的 --&gt;&lt;/div&gt;&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt;\tnew Vue(&#123; el:&#x27;#app&#x27;, data:&#123; msg: &#x27;123&#x27; &#125;\t&#125;)&lt;/script&gt; v-text 会覆盖元素中原本的内容（不替代占位符）12345678910111213&lt;div id=&quot;app&quot;&gt; &lt;h4 v-text=&quot;msg&quot;&gt;======&lt;/h4&gt;\t&lt;!-- 默认 v-text 是没有闪烁问题的 --&gt;&lt;/div&gt;&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt;\tnew Vue(&#123; el:&#x27;#app&#x27;, data:&#123; msg: &#x27;123&#x27; &#125;\t&#125;)&lt;/script&gt; v-html 渲染html123456789101112&lt;div id=&quot;app&quot;&gt;\t&lt;div v-html=&quot;msg&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt;\tnew Vue(&#123; el:&#x27;#app&#x27;, data:&#123; msg: &#x27;&lt;h1&gt;哈哈哈！这是一个大大大的h1&lt;/h1&gt;&#x27; &#125;\t&#125;)&lt;/script&gt; V-bind(:) 是在vue中用于绑定属性的指令 (单向性，M-&gt;V)1234567891011121314&lt;div id=&quot;app&quot;&gt;\t&lt;!-- v-bind 可以简写为 `:` --&gt;\t&lt;!-- v-bind 中可以写合法的js表达式 --&gt;\t&lt;input type=&quot;button&quot; value=&quot;按钮&quot; :title=&quot;mytitle&quot;&gt;\t&lt;/div&gt;&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt;\tnew Vue(&#123; el:&#x27;#app&#x27;, data:&#123; mytitle: &#x27;这是一个自定义的title&#x27; &#125;\t&#125;)&lt;/script&gt; v-on (@) 用来绑定事件123456789101112131415161718192021&lt;div id=&quot;app&quot;&gt;\t&lt;input type=&quot;button&quot; value=&quot;按钮&quot; id=&quot;btn&quot; @click=&quot;show&quot;&gt; &lt;/div&gt;&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt;\tnew Vue(&#123; el:&#x27;#app&#x27;, data:&#123; msg: &#x27;&lt;h1&gt;哈哈哈！这是一个大大大的h1&lt;/h1&gt;&#x27; &#125;, &lt;!-- methods定义了当前vue实例所有可用的方法 --&gt; methods:&#123; show:function()&#123; alert(&#x27;Hello&#x27;) &#125; &#125;\t&#125;)\t/*document.getElementById(&#x27;btn&#x27;).onclick=function()&#123; alert(&quot;Hello!&quot;)\t&#125;*/&lt;/script&gt; 案例：跑马灯效果12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849&lt;!-- 创建一个要控制的区域 --&gt;&lt;div id=&quot;app&quot;&gt;\t&lt;input type=&quot;button&quot; value=&quot;浪起来&quot; @click=&quot;lang&quot;&gt;\t&lt;input type=&quot;button&quot; value=&quot;低调&quot; @click=&quot;stop&quot;&gt;\t&lt;h4&gt;&#123;&#123; msg &#125;&#125;&lt;/h4&gt;&lt;/div&gt;&lt;script src=&quot;https://cdn.staticfile.org/vue/2.2.2/vue.min.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt;\t// 注意： 在vm实例中，如果想要获取data上的数据，或者 想要调用methods中的 方法，必须通过 this.数据名 来进行访问，这里的this 就表示我么们new出来的 VM 实例对象\tvar vm = new Vue(&#123; el:&#x27;#app&#x27;, data:&#123; msg: &#x27;猥琐发育，别浪~~！&#x27;, intervalID: null //在data上定义一个 定时器id &#125;, methods:&#123; lang: function()&#123; //console.log(this.msg) // ()=&gt; 指向 setInterval() 外部实例 //this if (this.intervalID != null) return; this.intervalID = setInterval( ()=&gt; &#123; // 获取头字符 var start = this.msg.substring(0,1) // 获取尾字符 var end = this.msg.substring(1) // 重新赋值 this.msg = end + start &#125;,400) // 注意： vm实例会监听自己身上的data 所有属性的改变，一旦改变就会同步到页面中 &#125;, stop: function()&#123; //停止 clearInterval(this.intervalID) this.intervalID = null &#125; &#125;\t&#125;)&lt;/script&gt;\t//分析\t// 1.给【浪起来】按钮绑定一个点击事件v-on\t// 2.在按钮的事件处理函数中，写业务逻辑代码，拿到msg字符串。做截取操作（substring），把第一个放到最后一个\t// 3.为了实现点击一下自动截取，需要把 2 代码放在定时器&lt;/script&gt; 演示: 事件修饰符 .stop 阻止冒泡 .prevent 阻止默认事件 .capture 添加事件监听器时使用事件捕获 .self 只当事件在该元素本身（比如不是子元素），触发时回调 .once 事件只触发一次 .native 自定义的组件上的绑定原生事件得添加 .stop 阻止全部冒泡12345678910111213141516171819202122232425262728&lt;style&gt;\t.inner&#123; height: 150px; background-color: darkcyan;\t&#125;&lt;/style&gt;&lt;div id=&quot;app&quot;&gt;\t&lt;div class=&quot;inner&quot; @click=&quot;divHandler&quot;&gt; &lt;input type=&quot;button&quot; value=&quot;戳起来&quot; @click.stop=&quot;btnHandler&quot;&gt;\t&lt;/div&gt;&lt;/div&gt;&lt;script src=&quot;https://cdn.staticfile.org/vue/2.2.2/vue.min.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt;\tvar vm = new Vue(&#123; el:&#x27;#app&#x27;, data:&#123; &#125;, methods:&#123; divHandler: function()&#123; console.log(&#x27;这是触发了inner div点击事件&#x27;) &#125;, btnHandler: function()&#123; console.log(&#x27;按钮点击事件&#x27;) &#125; &#125;\t&#125;)&lt;/script&gt; .prevent1234567891011121314151617&lt;div id=&quot;app&quot;&gt;\t&lt;a href=&quot;http://www.baidu.com&quot; @click.prevent=&quot;linkClick()&quot;&gt;有问题问百度&lt;/a&gt;&lt;/div&gt;&lt;script src=&quot;https://cdn.staticfile.org/vue/2.2.2/vue.min.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt;\tvar vm = new Vue(&#123; el:&#x27;#app&#x27;, data:&#123; &#125;, methods:&#123; linkClick: function()&#123; console.log(&#x27;触发了链接的点击事件&#x27;) &#125; &#125;\t&#125;)&lt;/script&gt; .capture1234567891011121314151617181920212223242526272829&lt;style&gt;\t.inner&#123; height: 150px; background-color: darkcyan;\t&#125;&lt;/style&gt;&lt;div id=&quot;app&quot;&gt;\t&lt;!-- 使用 .capture 实现捕获触发事件的机制 --&gt;\t&lt;div class=&quot;inner&quot; @click.capture=&quot;divHandler&quot;&gt; &lt;input type=&quot;button&quot; value=&quot;戳起来&quot; @click=&quot;btnHandler&quot;&gt;\t&lt;/div&gt;&lt;/div&gt;&lt;script src=&quot;https://cdn.staticfile.org/vue/2.2.2/vue.min.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt;\tvar vm = new Vue(&#123; el:&#x27;#app&#x27;, data:&#123; &#125;, methods:&#123; divHandler: function()&#123; console.log(&#x27;这是触发了inner div点击事件&#x27;) &#125;, btnHandler: function()&#123; console.log(&#x27;按钮点击事件&#x27;) &#125; &#125;\t&#125;)&lt;/script&gt; .self 阻止自己冒泡1234567891011121314151617181920212223242526272829&lt;style&gt;\t.inner&#123; height: 150px; background-color: darkcyan;\t&#125;&lt;/style&gt;&lt;div id=&quot;app&quot;&gt;\t&lt;!-- 只有点击当前元素才会触发事件处理函数 --&gt;\t&lt;div class=&quot;inner&quot; @click.self=&quot;divHandler&quot;&gt; &lt;input type=&quot;button&quot; value=&quot;戳起来&quot; @click=&quot;btnHandler&quot;&gt;\t&lt;/div&gt;&lt;/div&gt;&lt;script src=&quot;https://cdn.staticfile.org/vue/2.2.2/vue.min.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt;\tvar vm = new Vue(&#123; el:&#x27;#app&#x27;, data:&#123; &#125;, methods:&#123; divHandler: function()&#123; console.log(&#x27;这是触发了inner div点击事件&#x27;) &#125;, btnHandler: function()&#123; console.log(&#x27;按钮点击事件&#x27;) &#125; &#125;\t&#125;)&lt;/script&gt; .once123456789101112131415161718&lt;div id=&quot;app&quot;&gt;\t&lt;!-- 使用 .once 只触发一次事件函数 --&gt; &lt;a href=&quot;http://www.baidu.com&quot; @click.prevent.once=&quot;linkClick()&quot;&gt;有问题问百度&lt;/a&gt;&lt;/div&gt;&lt;script src=&quot;https://cdn.staticfile.org/vue/2.2.2/vue.min.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt;\tvar vm = new Vue(&#123; el:&#x27;#app&#x27;, data:&#123; &#125;, methods:&#123; linkClick: function()&#123; console.log(&#x27;触发了链接的点击事件&#x27;) &#125; &#125;\t&#125;)&lt;/script&gt; v-model 实现双向数据绑定(双向性数据绑定 表单元素 &lt;-&gt; Model ) 只能运用于表单1234567891011121314151617&lt;div id=&quot;app&quot;&gt;\t&lt;h4&gt;&#123;&#123; msg &#125;&#125;&lt;/h4&gt;\t&lt;input type=&quot;text&quot; v-model=&quot;msg&quot;&gt;&lt;/div&gt;&lt;script src=&quot;https://cdn.staticfile.org/vue/2.2.2/vue.min.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt;\tvar vm = new Vue(&#123; el:&#x27;#app&#x27;, data:&#123; msg: &#x27;简直完美，没瑕疵&#x27; &#125;, methods:&#123; &#125;\t&#125;)&lt;/script&gt; 案例: 简易计算器 v-class 绑定样式123456789101112131415161718192021222324252627282930313233&lt;style&gt;.red&#123;color:red&#125;.thin&#123;font-weight: 200;&#125;.italic&#123;font-style:intalic;&#125;.active&#123;letter-spacing: 0.5em&#125;&lt;/style&gt;&lt;div id=&quot;app&quot;&gt;\t&lt;!-- 第一种使用方式直接传送一个数组 class用v-bind绑定 --&gt;\t&lt;h1 :class=&quot;[&#x27;thin&#x27;,&#x27;intalic&#x27;]&gt;这是一个很大很大的H1,大到你无法想象&lt;/h1&gt;\t&lt;!-- 在数组使用三值表达式 --&gt;\t&lt;h1 :class=&quot;[&#x27;thin&#x27;,&#x27;intalic&#x27;,flag?&#x27;active&#x27;: &#x27;&#x27;]&quot;&gt;这是一个很大很大的H1,大到你无法想象&lt;/h1&gt;\t&lt;!-- 通过对象 --&gt;\t&lt;h1 :class=&quot;[&#x27;thin&#x27;,&#x27;intalic&#x27;,&#123;&#x27;active&#x27;: flag&#125;]&quot;&gt;这是一个很大很大的H1,大到你无法想象&lt;/h1&gt;\t&lt;!-- 在为class 使用v-bind 绑定对象的时候，对象的属性是类名，由于对象的属性可带&amp;不可带引号，所以这里我们就没写引号： 属性的值是一个标识符--&gt;\t&lt;h1 :class=&quot;classObj&quot;&gt;这是一个很大很大的H1,大到你无法想象&lt;/h1&gt;&lt;/div&gt;&lt;script src=&quot;https://cdn.staticfile.org/vue/2.2.2/vue.min.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt;\tvar vm = new Vue(&#123; el:&#x27;#app&#x27;, data:&#123; flag: false, classObj: &#123;red:true,thin:true,italic:false,active:false&#125; &#125;, methods:&#123; &#125;\t&#125;)&lt;/script&gt; .style 内联样式绑定123456789101112131415161718&lt;div id=&quot;app&quot;&gt;\t&lt;!-- 对象就是无序键值对的集合 --&gt;\t&lt;!-- 如果属性存在&#x27;-&#x27;必须加引号 --&gt;\t&lt;h1 :style=&quot;[styleObj1,styleObj2]&quot;&gt;这是一个h1&lt;/h1&gt;&lt;/div&gt;&lt;script src=&quot;https://cdn.staticfile.org/vue/2.2.2/vue.min.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt;\tvar vm = new Vue(&#123; el:&#x27;#app&#x27;, data:&#123; styleObj1:&#123;color:&#x27;red&#x27; ,&#x27;font-weight&#x27;: 200&#125; styleObj2:&#123;&#x27;font-style&#x27;,&#x27;italic&#x27;&#125; &#125;, methods:&#123; &#125;\t&#125;)&lt;/script&gt; v-for 和 key属性1234567891011121314151617181920212223242526272829303132333435363738394041424344&lt;div id=&quot;app&quot;&gt;\t&lt;!-- 遍历数组 --&gt;\t&lt;p v-for=&quot;&#123;item,i&#125; in list&quot;&gt;索引值：&#123;&#123;i&#125;&#125; ，值： &#123;&#123;item&#125;&#125;&lt;/p&gt;&lt;hr&gt;\t&lt;!-- v-for循环遍历对象数组 --&gt; &lt;p v-for=&quot;&#123;user,i&#125; in list2&quot;&gt;索引值：&#123;&#123;i&#125;&#125; , userid: &#123;&#123;user.id&#125;&#125; , name: &#123;&#123;user.name&#125;&#125;&lt;/p&gt;&lt;hr&gt;\t&lt;!-- v-for 遍历对象 --&gt;\t&lt;!-- 注意在遍历对象身上的键值对的时候，除了有val、 key ，第三个位置还有个索引 --&gt;\t&lt;p v-for=&quot;&#123;val,key,i&#125; in user&quot;&gt;值:&#123;&#123;val&#125;&#125;,键值：&#123;&#123;key&#125;&#125;,索引：&#123;&#123;i&#125;&#125;&lt;/p&gt;&lt;hr&gt;\t&lt;!-- v-for迭代数字 --&gt;\t&lt;!-- in 后放 普通数组，对象数组，对象，数字 --&gt;\t&lt;!-- 如果使用v-for迭代数字的话，count值从 1 开始 --&gt;\t&lt;p v-for=&quot;count in 10&quot;&gt;这是第 &#123;&#123;count&#125;&#125; 次循环&lt;/p&gt;&lt;/div&gt;&lt;script src=&quot;https://cdn.staticfile.org/vue/2.2.2/vue.min.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt;\tvar vm = new Vue(&#123; el:&#x27;#app&#x27;, data:&#123; list:[1,2,3,4,5], list2:[ &#123;id: 1 ,name: &#x27;re1&#x27;&#125;, &#123;id: 2 ,name: &#x27;re2&#x27;&#125;, &#123;id: 3 ,name: &#x27;re3&#x27;&#125;, &#123;id: 4 ,name: &#x27;re4&#x27;&#125;, ], user:&#123; id: 1, name: &#x27;董&#x27;, gender: &#x27;男&#x27; &#125; &#125;, methods:&#123; &#125;\t&#125;)&lt;/script&gt; v-for使用注意事项： 2.2.0+ 版本里，当在组件中使用v-for时,key值是必须的，强制数据关联key定义v-for唯一身份 123456789101112131415161718192021222324252627282930313233343536&lt;div id=&quot;app&quot;&gt;\t&lt;div&gt; &lt;label&gt;ID:&lt;input v-model=&quot;id&quot;&gt;&lt;/input&gt;&lt;/label&gt; &lt;label&gt;Name:&lt;input v-model=&quot;name&quot;&gt;&lt;/input&gt;&lt;/label&gt; &lt;input type=&quot;button&quot; value=&quot;添加&quot; @click=&quot;add&quot;&gt;\t&lt;/div&gt;\t&lt;!-- 注意：v-for 循环的时候，key 属性只能使用number 或取string --&gt;\t&lt;!-- 注意： key在使用的时候必须用v-bind绑定属性指定key值 --&gt;\t&lt;!-- 在组件中使用v-for循环时，或者在特定情况中，如果v-for有问题，必须在使用v-for的同时，指定唯一的字符串/数字，类型：key值 --&gt;\t&lt;p v-for=&quot;item in list&quot; :key=&quot;item&quot;&gt; &lt;input type=&quot;checkbox&quot;&gt;&#123;&#123;item.id&#125;&#125; ---- &#123;&#123;item.name&#125;&#125;\t&lt;/p&gt;&lt;/div&gt;&lt;script src=&quot;https://cdn.staticfile.org/vue/2.2.2/vue.min.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt;\tvar vm = new Vue(&#123; el:&#x27;#app&#x27;, data:&#123; id:&#x27;&#x27;, name:&#x27;&#x27;, list:&#123; [id:1,name:&#x27;里斯&#x27;], [id:2,name:&#x27;凯&#x27;], [id:3,name:&#x27;二哈&#x27;], [id:4,name:&#x27;小孩&#x27;] &#125; &#125;, methods:&#123; add: function()&#123; this.list.push(&#123;id:this.id,name: this.name&#125;) &#125; &#125;\t&#125;)&lt;/script&gt; 演示: v-if 每次都会重新删除或创建元素v-show 每次不会重新进行DOM的删除和创建操作，只是切换了元素的display:none12345678910111213141516171819&lt;div id=&quot;app&quot;&gt;\t&lt;input type=&quot;button&quot; name=&quot;&quot; @click=&quot;flag=!flag&quot; value=&quot;toggle&quot;&gt;\t&lt;!-- v-if 有较高的切换性能消耗 --&gt;\t&lt;h3 v-if=&quot;flag&quot;&gt;这是一个v-if控制的元素&lt;/h3&gt;\t&lt;!-- v-show 有较好的初始渲染消耗 --&gt;\t&lt;h3 v-show=&quot;flag&quot;&gt;这是使用v-show控制的元素&lt;/h3&gt;&lt;/div&gt;&lt;script src=&quot;https://cdn.staticfile.org/vue/2.2.2/vue.min.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt;\tvar vm = new Vue(&#123; el:&#x27;#app&#x27;, data:&#123; flag: false &#125;\t&#125;)&lt;/script&gt; 如果元素设计到频繁的切换,最好不要用v-if 推荐使用 v-show 如果元素可能永远也不会显示出来给用户看到,则推荐使用 v-if 演示: 过滤器 概念：可被用作一些常见文本的格式化 用在两个地方： 1.插值表达式 2. v-bind 表达式 过滤器调用时候的格式定义过滤器 1234// 过滤器中的function 第一个参数已经被规定死，永远都是 过滤器 管道符前面传递过来的数据Vue.filter(&#x27;过滤器名称&#x27;,function(data)&#123;\treturn data+&#x27;123&#x27;&#125;) 源码： 1234567891011121314151617181920212223242526272829303132&lt;div id=&quot;app&quot;&gt;\t&lt;p&gt;&lt;b&gt;过滤前：&lt;/b&gt;&#123;&#123;msg&#125;&#125;&lt;/p&gt;\t&lt;p&gt;&lt;b&gt;过滤后：&lt;/b&gt;&#123;&#123; msg | msgFormat1 &#125;&#125;&lt;/p&gt;\t&lt;p&gt;&lt;b&gt;传参过滤后：&lt;/b&gt;&#123;&#123; msg | msgFormat2(&#x27;疯狂、&#x27;,&#x27;帅气无比、&#x27;,&#x27;风流倜傥&#x27;) &#125;&#125;&lt;/p&gt;\t&lt;p&gt;&lt;b&gt;过滤器可以多次调用：&lt;/b&gt;&#123;&#123; msg | msgFormat1 | test &#125;&#125;&lt;/p&gt;&lt;/div&gt;&lt;script src=&quot;https://cdn.staticfile.org/vue/2.2.2/vue.min.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt;\t//定义一个vue全局过滤器\t// msg: 拿到msg数据 arg:传递的数据\tVue.filter(&#x27;msgFormat1&#x27;,function(msg)&#123; // 正常改变只变一个，所以replace前加正则 return msg.replace(/单纯/g,&#x27;狂妄&#x27;)\t&#125;)\tVue.filter(&#x27;msgFormat2&#x27;,function(msg,arg,arg2,arg3)&#123; return msg.replace(/单纯/g,arg+arg2+arg3)\t&#125;)\tVue.filter(&#x27;test&#x27;,function(msg)&#123; return msg + &#x27;++++++++++++++++++++++++++&#x27;\t&#125;)\tvar vm = new Vue(&#123; el:&#x27;#app&#x27;, data:&#123; msg:&#x27;曾经，我也是一个单纯的少年，单纯的我，傻傻的问，谁是世界上最单纯的人&#x27; &#125;, methods:&#123;&#125;\t&#125;)&lt;/script&gt; 演示： 按键修饰符 .enter .tab .delete (捕获删除和空格) .esc .space .up .down .left .right .键盘码 品牌列表案例—-","tags":["Vue指令"],"categories":["Vue2.0"]},{"title":"MVC跟MVVM","path":"/posts/af8177f5.html","content":"Node后端中的MVC与前端中的MVVM之间的区别跟概念MVCMVVMmvc构成图示mvvm构成图示 对应关系MVCM: model处理数据的crudV: viewC:业务逻辑处理层 登录&amp;&amp;注销 MVVMM: model处理数据的crudV: viewVm: 是M跟V的调度者 拿ES6支持下的Vue代码来举例Vue的代码代码对应mvvm截图123456789101112131415&lt;div id=&quot;app&quot;&gt;\t&lt;p&gt;&#123;&#123; msg &#125;&#125;&lt;/p&gt;&lt;/div&gt;&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;&lt;script&gt;\t// 创建vue实例\t//当我们导入包之后，在浏览器内存中，就多了个vue构造函数\tvar vm = new Vue(&#123; el: &#x27;#app&#x27;, //vue实例控制页面哪个区域 data:&#123; //存放的是el中的数据 msg: &#x27;存放学习VUE&#x27; //通过vue提供的指令很方便的渲染到页面上，程序员不再手动操作dom元素了[前端的vue之类的框架。不提倡我们手动去操作dom] &#125; &#125;)&lt;/script&gt;vue mvvm结构","tags":["MVC和MVVM"],"categories":["前端"]},{"title":"前端流行框架","path":"/posts/ebf42551、.html","content":"为什么要学习流行框架企业为了提高开发效率，在企业中，时间就是效率，效率就是金钱-使用框架，能够提高效率 提高效率的发展历程 原生JS -&gt; Jquery之间的类库 -&gt; 前端模板引擎 -&gt; Angular.js &#x2F; vue.js 能够帮助我们减少不必要的DOM操作，提高渲染效率，双向数据绑定的概念【通过框架提供的指令，我们前端程序员需要关心数据的业务逻辑，不再关心DOM是如何渲染的了】 -在vue中，一个核心的概念，就是让用户不再操控DOM元素，解放了用户的双手，让程序员利用更多的时间去关注业务逻辑 框架和库的区别框架：是一套完整的解决方案；对项目的侵入性较大，项目如果中途突然更换框架，则需要重新架构整个项目eg:node中的express 库： 提供单一小功能，可以称之为插件，对侵入性小，很容易就能切换。eg:从Jquery 切换到 Zepto","tags":["Web流行框架"],"categories":["前端"]},{"title":"安装Vue-cli脚手架","path":"/posts/e52449ab.html","content":"在安装vue-cli时出现过以下几个问题 在用过 npm install -g @vue-cli 时：出现 起初我以为安装中途结束，因为一只猫突然跳上我的笔记本键盘然后又重新输入一遍但还是报上述图所示的问题 npm cache clean --force 清理缓存后决定再试一遍 然后我就懵了，入坑中…猜测是不是因为权限问题，以及npm版本问题考虑，果断的使用cnpm安装vue-cli npm install cnpm -g --registry=https://registry.npm.taobao.org 之后再使用 sudo cnpm install -g @vue-cli来下载vue-cli脚手架 安装成功！开始上项目","tags":["Vue-cli"],"categories":["Bug解决"]},{"title":"配置Vue-element-admin安装node-sass入坑","path":"/posts/e874c650.html","content":"官方文档：https://panjiachen.github.io/vue-element-admin-site/zh/guide/#%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84 我在安装vue&#x3D;element-admin的时候出现的错误 安装1234567891011121314# 克隆项目git clone https://github.com/PanJiaChen/vue-element-admin.git# 进入项目目录cd vue-element-admin# 安装依赖npm install# 建议不要用 cnpm 安装 会有各种诡异的bug 可以通过如下操作解决 npm 下载速度慢的问题npm install --registry=https://registry.npm.taobao.org# 本地开发 启动项目npm run dev 在执行 npm install 安装package.json 依赖时出现如下npm err 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122&gt; node-sass@4.13.1 install D:\\Project\\vue-admin-app\\vue-element-admin ode_modules ode-sass&gt; node scripts/install.jsDownloading binary from https://github.com/sass/node-sass/releases/download/v4.13.1/win32-x64-72_binding.nodeCannot download &quot;https://github.com/sass/node-sass/releases/download/v4.13.1/win32-x64-72_binding.node&quot;:ESOCKETTIMEDOUTHint: If github.com is not accessible in your location try setting a proxy via HTTP_PROXY, e.g. export HTTP_PROXY=http://example.com:1234or configure npm proxy via npm config set proxy http://example.com:8080&gt; node-sass@4.13.1 postinstall D:\\Project\\vue-admin-app\\vue-element-admin ode_modules ode-sass&gt; node scripts/build.jsBuilding: C:\\Program Files odejs ode.exe D:\\Project\\vue-admin-app\\vue-element-admin ode_modules ode-gyp\\bin ode-gyp.js rebuild --verbose --libsass_ext= --libsass_cflags= --libsass_ldflags= --libsass_library=gyp info it worked if it ends with okgyp verb cli [gyp verb cli &#x27;C:\\\\Program Files\\ odejs\\ ode.exe&#x27;,gyp verb cli &#x27;D:\\\\Project\\\\vue-admin-app\\\\vue-element-admin\\ ode_modules\\ ode-gyp\\\\bin\\ ode-gyp.js&#x27;,gyp verb cli &#x27;rebuild&#x27;,gyp verb cli &#x27;--verbose&#x27;,gyp verb cli &#x27;--libsass_ext=&#x27;,gyp verb cli &#x27;--libsass_cflags=&#x27;,gyp verb cli &#x27;--libsass_ldflags=&#x27;,gyp verb cli &#x27;--libsass_library=&#x27;gyp verb cli ]gyp info using node-gyp@3.8.0gyp info using node@12.16.2 | win32 | x64gyp verb command rebuild []gyp verb command clean []gyp verb clean removing &quot;build&quot; directorygyp verb command configure []gyp verb check python checking for Python executable &quot;python2&quot; in the PATHgyp verb `which` failed Error: not found: python2gyp verb `which` failed at getNotFoundError (D:\\Project\\vue-admin-app\\vue-element-admin ode_modules\\which\\which.js:13:12)gyp verb `which` failed at F (D:\\Project\\vue-admin-app\\vue-element-admin ode_modules\\which\\which.js:68:19)gyp verb `which` failed at E (D:\\Project\\vue-admin-app\\vue-element-admin ode_modules\\which\\which.js:80:29)gyp verb `which` failed at D:\\Project\\vue-admin-app\\vue-element-admin ode_modules\\which\\which.js:89:16gyp verb `which` failed at D:\\Project\\vue-admin-app\\vue-element-admin ode_modules\\isexe\\index.js:42:5gyp verb `which` failed at D:\\Project\\vue-admin-app\\vue-element-admin ode_modules\\isexe\\windows.js:36:5gyp verb `which` failed at FSReqCallback.oncomplete (fs.js:167:21)gyp verb `which` failed python2 Error: not found: python2gyp verb `which` failed at getNotFoundError (D:\\Project\\vue-admin-app\\vue-element-admin ode_modules\\which\\which.js:13:12)gyp verb `which` failed at F (D:\\Project\\vue-admin-app\\vue-element-admin ode_modules\\which\\which.js:68:19)gyp verb `which` failed at E (D:\\Project\\vue-admin-app\\vue-element-admin ode_modules\\which\\which.js:80:29)gyp verb `which` failed at D:\\Project\\vue-admin-app\\vue-element-admin ode_modules\\which\\which.js:89:16gyp verb `which` failed at D:\\Project\\vue-admin-app\\vue-element-admin ode_modules\\isexe\\index.js:42:5gyp verb `which` failed at D:\\Project\\vue-admin-app\\vue-element-admin ode_modules\\isexe\\windows.js:36:5gyp verb `which` failed at FSReqCallback.oncomplete (fs.js:167:21) &#123;gyp verb `which` failed stack: &#x27;Error: not found: python2 &#x27; +gyp verb `which` failed &#x27; at getNotFoundError (D:\\\\Project\\\\vue-admin-app\\\\vue-element-admin\\ ode_modules\\\\which\\\\which.js:13:12) &#x27; +gyp verb `which` failed &#x27; at F (D:\\\\Project\\\\vue-admin-app\\\\vue-element-admin\\ ode_modules\\\\which\\\\which.js:68:19) &#x27; +gyp verb `which` failed &#x27; at E (D:\\\\Project\\\\vue-admin-app\\\\vue-element-admin\\ ode_modules\\\\which\\\\which.js:80:29) &#x27; +gyp verb `which` failed &#x27; at D:\\\\Project\\\\vue-admin-app\\\\vue-element-admin\\ ode_modules\\\\which\\\\which.js:89:16 &#x27; +gyp verb `which` failed &#x27; at D:\\\\Project\\\\vue-admin-app\\\\vue-element-admin\\ ode_modules\\\\isexe\\\\index.js:42:5 &#x27; +gyp verb `which` failed &#x27; at D:\\\\Project\\\\vue-admin-app\\\\vue-element-admin\\ ode_modules\\\\isexe\\\\windows.js:36:5 &#x27; +gyp verb `which` failed &#x27; at FSReqCallback.oncomplete (fs.js:167:21)&#x27;,gyp verb `which` failed code: &#x27;ENOENT&#x27;gyp verb `which` failed &#125;gyp verb check python checking for Python executable &quot;python&quot; in the PATHgyp verb `which` failed Error: not found: pythongyp verb `which` failed at getNotFoundError (D:\\Project\\vue-admin-app\\vue-element-admin ode_modules\\which\\which.js:13:12)gyp verb `which` failed at F (D:\\Project\\vue-admin-app\\vue-element-admin ode_modules\\which\\which.js:68:19)gyp verb `which` failed at E (D:\\Project\\vue-admin-app\\vue-element-admin ode_modules\\which\\which.js:80:29)gyp verb `which` failed at D:\\Project\\vue-admin-app\\vue-element-admin ode_modules\\which\\which.js:89:16gyp verb `which` failed at D:\\Project\\vue-admin-app\\vue-element-admin ode_modules\\isexe\\index.js:42:5gyp verb `which` failed at D:\\Project\\vue-admin-app\\vue-element-admin ode_modules\\isexe\\windows.js:36:5gyp verb `which` failed at FSReqCallback.oncomplete (fs.js:167:21)gyp verb `which` failed python Error: not found: pythongyp verb `which` failed at getNotFoundError (D:\\Project\\vue-admin-app\\vue-element-admin ode_modules\\which\\which.js:13:12)gyp verb `which` failed at F (D:\\Project\\vue-admin-app\\vue-element-admin ode_modules\\which\\which.js:68:19)gyp verb `which` failed at E (D:\\Project\\vue-admin-app\\vue-element-admin ode_modules\\which\\which.js:80:29)gyp verb `which` failed at D:\\Project\\vue-admin-app\\vue-element-admin ode_modules\\which\\which.js:89:16gyp verb `which` failed at D:\\Project\\vue-admin-app\\vue-element-admin ode_modules\\isexe\\index.js:42:5gyp verb `which` failed at D:\\Project\\vue-admin-app\\vue-element-admin ode_modules\\isexe\\windows.js:36:5gyp verb `which` failed at FSReqCallback.oncomplete (fs.js:167:21) &#123;gyp verb `which` failed stack: &#x27;Error: not found: python &#x27; +gyp verb `which` failed &#x27; at getNotFoundError (D:\\\\Project\\\\vue-admin-app\\\\vue-element-admin\\ ode_modules\\\\which\\\\which.js:13:12) &#x27; +gyp verb `which` failed &#x27; at F (D:\\\\Project\\\\vue-admin-app\\\\vue-element-admin\\ ode_modules\\\\which\\\\which.js:68:19) &#x27; +gyp verb `which` failed &#x27; at E (D:\\\\Project\\\\vue-admin-app\\\\vue-element-admin\\ ode_modules\\\\which\\\\which.js:80:29) &#x27; +gyp verb `which` failed &#x27; at D:\\\\Project\\\\vue-admin-app\\\\vue-element-admin\\ ode_modules\\\\which\\\\which.js:89:16 &#x27; +gyp verb `which` failed &#x27; at D:\\\\Project\\\\vue-admin-app\\\\vue-element-admin\\ ode_modules\\\\isexe\\\\index.js:42:5 &#x27; +gyp verb `which` failed &#x27; at D:\\\\Project\\\\vue-admin-app\\\\vue-element-admin\\ ode_modules\\\\isexe\\\\windows.js:36:5 &#x27; +gyp verb `which` failed &#x27; at FSReqCallback.oncomplete (fs.js:167:21)&#x27;,gyp verb `which` failed code: &#x27;ENOENT&#x27;gyp verb `which` failed &#125;gyp verb could not find &quot;python&quot;. checking python launchergyp verb could not find &quot;python&quot;. guessing locationgyp verb ensuring that file exists: C:\\Python27\\python.exegyp ERR! configure errorgyp ERR! stack Error: Can&#x27;t find Python executable &quot;python&quot;, you can set the PYTHON env variable.gyp ERR! stack at PythonFinder.failNoPython (D:\\Project\\vue-admin-app\\vue-element-admin ode_modules ode-gyp\\lib\\configure.js:484:19)gyp ERR! stack at PythonFinder.&lt;anonymous&gt; (D:\\Project\\vue-admin-app\\vue-element-admin ode_modules ode-gyp\\lib\\configure.js:509:16)gyp ERR! stack at callback (D:\\Project\\vue-admin-app\\vue-element-admin ode_modules\\graceful-fs\\polyfills.js:295:20)gyp ERR! stack at FSReqCallback.oncomplete (fs.js:167:21)gyp ERR! System Windows_NT 10.0.17763gyp ERR! command &quot;C:\\\\Program Files\\ odejs\\ ode.exe&quot; &quot;D:\\\\Project\\\\vue-admin-app\\\\vue-element-admin\\ ode_modules\\ ode-gyp\\\\bin\\ ode-gyp.js&quot; &quot;rebuild&quot; &quot;--verbose&quot; &quot;--libsass_ext=&quot; &quot;--libsass_cflags=&quot; &quot;--libsass_ldflags=&quot; &quot;--libsass_library=&quot;gyp ERR! cwd D:\\Project\\vue-admin-app\\vue-element-admin ode_modules ode-sassgyp ERR! node -v v12.16.2gyp ERR! node-gyp -v v3.8.0gyp ERR! not okBuild failed with error code: 1npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.12 (node_modules\\fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.12: wanted &#123;&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;&#125; (current: &#123;&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;&#125;)npm ERR! code ELIFECYCLEnpm ERR! errno 1npm ERR! node-sass@4.13.1 postinstall: `node scripts/build.js`npm ERR! Exit status 1npm ERR!npm ERR! Failed at the node-sass@4.13.1 postinstall script.npm ERR! This is probably not a problem with npm. There is likely additional logging output above.npm ERR! A complete log of this run can be found in:npm ERR! C:\\Users\\董\\AppData\\Roaming pm-cache\\_logs\\2020-04-12T14_25_48_942Z-debug.log 解决办法 利用淘宝镜像安装node-sass 1npm i node-sass --sass_binary_site=https://npm.taobao.org/mirrors/node-sass/ 因为上一次npm失败，所以需要把已下载的东西重新编译一下 1npm rebuild node-sass 之后开始安装其余的以来 12npm installnpm run dev # 启动项目 结果 123456789101112$ npm run dev&gt; vue-element-admin@4.2.1 dev D:\\Project\\vue-admin-app\\vue-element-admin&gt; vue-cli-service serve INFO Starting development server... 10% building 2/2 modules 0 activei ?wds?: Project is running at http://localhost:9527/i ?wds?: webpack output is served from /i ?wds?: Content not from webpack is served from D:\\Project\\vue-admin-app\\vue-element-admin\\publici ?wds?: 404s will fallback to /index.html 98% after emitting CopyPlugin DONE Compiled successfully in 33840ms22:33:08 效果图","tags":["Vue-element-admin"],"categories":["Bug解决"]},{"title":"git建立SSH信任","path":"/posts/b5cf5e6d.html","content":"在 macOS、Linux 或 Windows 上通过 SSH 连接到 Git 存储库，以使用 HTTPS 身份验证安全连接。 在 Windows 上，我们建议使用 Git 凭据管理器 或 个人访问令牌。 SSH URL 已更改，但旧的 SSH URL 将继续生效 。 如果已设置 SSH，则应将远程 URL 更新为新格式： 方法代码 在本地生成公钥和密钥： ssh-keygen -t rsa 将本地生成的公钥发送到服务器上（建立信任关系）： 测试ssh远程登陆是否成功：ssh root@server_ip 123ssh-keygen -t rsa#注意这里UserName、root、server_ip 一定要看好ssh-copy-id -i C:/Users/UserName/.ssh/id_rsa.pub root@server_ip 建立密钥后error报错解决方案在建立密钥过程中如果出现的错误error: sign_and_send_pubkey: signing failed: agent refused operation12ssh-agent -sssh-add","tags":["SSH"],"categories":["Git"]},{"title":"npm安装、更新与卸载","path":"/posts/aa8b35df.html","content":"npm 为你和你的团队打开了连接整个 JavaScript 天才世界的一扇大门。它是世界上最大的软件注册表，每星期大约有 30 亿次的下载量，包含超过 600000 个 包（package） （即，代码模块）。来自各大洲的开源软件开发者使用 npm 互相分享和借鉴。包的结构使您能够轻松跟踪依赖项和版本。 npm 由三个独立的部分组成： 网站 是开发者查找包（package）、设置参数以及管理 npm 使用体验的主要途径。 注册表（registry） 是一个巨大的数据库，保存了每个包（package）的信息。 命令行工具 通过命令行或终端运行。开发者通过 CLI 与 npm 打交道 安装途径：从　node.js 官网进行安装 安装过程 window10系统 百度搜索nodejs进入官网选择windows进行下载 linux -就拿deepinOS来说 这里有三种方法 1. 官方途径：通过包管理器方式安装 node8版本： 12curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -sudo apt-get install -y nodejs node10版本： 12curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -sudo apt-get install -y nodejs 参考官方教程,但是很奇怪，会报错，猜测deepin系统的原因。 2.通过源码编译安装在node官网下载专区找到系统对应的版本，鼠标右键复制链接。打开deepin终端输入： 下载node 1wget https://nodejs.org/dist/v8.11.4/node-v8.11.4-linux-x64.tar.xz 解压文件 1tar -xvf node-v8.11.4-linux-x64.tar.xz 切换并查看node所在路径 123cd node-v8.11.4-linux-x64/binpwd 查看node版本 1node -v 将node和npm设置为全局 （注意路径为上述第3部的路径） 123sudo ln /home/ubuntu/node-v8.11.4-linux-x64/bin/node /usr/local/bin/nodesudo ln /home/ubuntu/node-v8.11.4-linux-x64/bin/npm /usr/local/bin/npmpwd 这种方法配置的环境容易出问题，在安装http-server时依然报错。 3.使用自带的apt安装 安装node与npm12sudo apt install nodejssudo apt install npm 安装管理nodejs 本身工具，n模块1sudo npm install -g n 升级 node 到制定版本，后接版本号123sudo n latest //最新版本sudo n stable //稳定版本sudo n lts //长期支持版本 升级 npm 到最新版本1sudo npm install npm@latest -g 利用npm下载本地包1234567891011#下载npm install &lt;package_name&gt; #自动创建一个node_modules目录npm -v#更新cd &lt;需要更新的路径根目录&gt;npm update &lt;package_name&gt; #卸载cd &lt;需要卸载的路径根目录&gt;npm uninstall &lt;package_name&gt; 利用npm下载全局包123456#下载npm install -g &lt;package_name&gt;#更新npm update -g &lt;package_name&gt;#卸载npm uninstall -g &lt;package_name&gt; “全局包”跟“本地包”的区别： 全局包：下载到电脑本地，可应用于所有 本地包：只作用于本地根目录 就看npm不爽，下载速度死慢死慢，对不住!我没忍住，要斯文点，抱歉…下面介绍一下npm跟cnpm npm 允许用户从npm服务器下载别人编写的第三方包使用 允许用户从上述服务器下载并安装别人写的命令行程序到本地并且可以使用 允许用户将自己写的包或者命令行上传到上述的服务器供别人使用 npm 命令 npm -v 来测试是否成功安装 查看当前目录已安装插件： npm list 更新全部插件： npm update [--save-dev] 使用 npm 更新对应插件：npm update &lt;name&gt; [-g] [--save-dev] 使用 npm 卸载插件： npm install &lt;name&gt; [-g] [--save-dev] cnpm 淘宝团队做的国内镜像，因为npm的服务器位于国外可能会影响安装。淘宝镜像与官方同步频率目前为 10分钟 一次以保证尽量与官方服务同步 安装： 命令提示符执行npm install cnpm -g --registry=https://registry.npm.taobao.orgcnpm cnpm -v 看看是否安装成功 插一句（一本正经的bb）: npm下载真的慢，不是电脑的问题！ 通过改变地址来使用淘宝镜像 npm的默认地址是 https://registry.npmjs.org/ 可以使用 npm config get registry 来查看npm仓库地址 可以用 npm config set registry https://registry.npm.taobao.org 来改变默认下载地址，达到可以不安装 cnpm 就能采用淘宝镜像的目的，然后使用上面的get命令查看是否成功。 另外 -g :全局安装 -S :相当于npm install module_name --save 写入package.json 的 devDependencies，这里面的插件只用于开发环境，不用于生产环境，比如 babel 、 webpack打包 插件就是开发时的需要，真正程序打包并不需要的一些插件 -D:相当于 npm install module_name --save-dev，写入 package.json 的devDependencies , devDependencies 里面的插件只用于开发环境，不用于生产环境。比如一些babel编译功能的插件、webpack打包插件就是开发时候的需要，真正程序打包跑起来并不需要的一些插件。 为什么要保存在package.json 因为node_module包实在是太大了。用一个配置文件保存，只打包安装对应配置文件的插件，按需导入。 npm err安装报错解决办法12345678npm ERR! code ETIMEDOUTnpm ERR! errno ETIMEDOUTnpm ERR! network request to https://registry.npmjs.org/hexo-deployer-git failed, reason: connect ETIMEDOUT 211.136.113.1:8080npm ERR! network This is a problem related to network connectivity.npm ERR! network In most cases you are behind a proxy or have bad network settings.npm ERR! networknpm ERR! network If you are behind a proxy, please make sure that thenpm ERR! network &#x27;proxy&#x27; config is set properly. See: &#x27;npm help config&#x27; 在执行npm install时出现以上错误，尝试了很多种方法，都没有解决，最后使用http://stackoverflow.com/questions/20397883/npm-doesnt-install-any-modules-network-socket-hangs-up 中的方法，成功解决问题。 解决办法： 1.先清除以前代理设置 12npm config set proxy nullnpm config set https-proxy null 2.重新设置 1npm config set registry http://registry.cnpmjs.org/ 3.npm install 问题212345npm ERR! Unexpected end of JSON input while parsing near &#x27;...exo-fs&quot;,&quot;version&quot;:&quot;0.&#x27;npm ERR! A complete log of this run can be found in:npm ERR! C:\\Users\\董\\AppData\\Roaming pm-cache\\_logs\\2020-05-15T14_41_43_153Z-debug.log 解决办法： npm cache clean --force","tags":["npm","nodejs"],"categories":["NPM"]},{"title":"Markdown指南","path":"/posts/e2396fcb.html","content":"主要介绍markdown的一些基本语法 markdown 的语法概述，您可以在github上的任何地方或者你自己的文件中使用markdown 语法（我感觉它类似html的标签） 标头123# This is an &lt;h1&gt; tag## This is an &lt;h2&gt; tag###### This is an &lt;h6&gt; tag 重点1234567*This text will be italic*_This will also be italic_**This text will be bold**__This will also be bold___You **can** combine them_ 清单无序123456* Item 1* Item 2 * Item 2a * Item 2b 有序123451. Item 11. Item 21. Item 3 1. Item 3a 1. Item 3b 图片12![Github Logo](/images/logo.png)Format: ![alt text](url) 链接12eg:http://github.com -automatic![Github](http://github.com) 块引用12345胖虎说:&gt;　大熊，你真菜&gt;　静香是我的了！哈哈哈 内联代码1｀&lt;addr&gt;｀ 就是用反引号","tags":["Markdown语法"],"categories":["Markdown"]},{"title":"git提交文件篇","path":"/posts/870bc40.html","content":"向服务器仓库提交文件 1.创建描述文档1touch README.md 2.添加文件12git add 文件名git add . 一键add 3.提交文件12git commit -m “提交文件说明”git remote add origin git@xx.xx.xx.xx:repos/xxx/xxx/xxx.git 4.推送到远程仓库 普通推送：1git push 强行推送：1git push -u origin master 注意如果这一步报错就说明README.md文件没在本地，需要合并一下 1git pull --rebase origin master","tags":["git","gitbash"],"categories":["Git"]}]